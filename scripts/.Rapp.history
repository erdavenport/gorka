class.winter.SNPs
class(winter.SNPs)
##### Read in all info for SNPs that were significant in one season:#
print("generating list of significant SNPs")#
winter.SNPs <- c()#
for (i in 1:length(winter.list)) {	#
	assoc <- read.table(file=paste(winter.path,winter.list[i], sep=""), sep=" ", header=TRUE, colClasses=c("numeric", "character", "numeric", "numeric", "character", "character", "numeric", "numeric", "numeric", "numeric"))#
	sig <- assoc[which(assoc$p_lrt <= 0.05/dim(assoc)[1] | assoc$q_lrt <= 0.1),]#
	sig <- cbind(rep(gsub("hutt.3chip.hg19remap.winter.GWAS.", "", gsub(".column.*.txt", "", winter.list[i])), dim(sig)[1]), sig)#
	winter.SNPs <- rbind(winter.SNPs, sig)#
}#
#
summer.SNPs <- c()#
for (i in 1:length(summer.list)) {	#
	assoc <- read.table(file=paste(summer.path,summer.list[i], sep=""), sep=" ", header=TRUE, colClasses=c("numeric", "character", "numeric", "numeric", "character", "character", "numeric", "numeric", "numeric", "numeric"))#
	sig <- assoc[which(assoc$p_lrt <= 0.05/dim(assoc)[1] | assoc$q_lrt <= 0.1),]#
	sig <- cbind(rep(gsub("hutt.3chip.hg19remap.summer.GWAS.", "", gsub(".column.*.txt", "", summer.list[i])), dim(sig)[1]), sig)#
	summer.SNPs <- rbind(summer.SNPs, sig)#
}#
#
added.SNPs <- c()#
for (i in 1:length(added.list)) {	#
	assoc <- read.table(file=paste(added.cluster.path,added.list[i], sep=""), sep=" ", header=TRUE, colClasses=c("numeric", "character", "numeric", "numeric", "character", "character", "numeric", "numeric", "numeric", "numeric"))#
	sig <- assoc[which(assoc$p_lrt <= 0.05/dim(assoc)[1] | assoc$q_lrt <= 0.1),]#
	sig <- cbind(rep(gsub("GWAS.127.season.added.bacteria.qvalues.", "", gsub(".column.*.txt", "", added.list[i])), dim(sig)[1]), sig)#
	added.SNPs <- rbind(added.SNPs, sig)#
}#
#
averaged.SNPs <- c()#
for (i in 1:length(averaged.list)) {	#
	assoc <- read.table(file=paste(averaged.cluster.path,averaged.list[i], sep=""), sep=" ", header=TRUE, colClasses=c("numeric", "character", "numeric", "numeric", "character", "character", "numeric", "numeric", "numeric", "numeric"))#
	sig <- assoc[which(assoc$p_lrt <= 0.05/dim(assoc)[1] | assoc$q_lrt <= 0.1),]#
	sig <- cbind(rep(gsub("GWAS.127.season.averaged.bacteria.qvalues.", "", gsub(".column.*.txt", "", averaged.list[i])), dim(sig)[1]), sig)#
	averaged.SNPs <- rbind(averaged.SNPs, sig)#
}#
colnames(winter.SNPs)[1] <- "bacteria"#
colnames(summer.SNPs)[1] <- "bacteria"#
colnames(averaged.SNPs)[1] <- "bacteria"#
colnames(added.SNPs)[1] <- "bacteria"
winter.SNPs
class(winter.SNPs)
winter.SNPs <- cbind(winter.SNPs, not.winter)
###### PARAMETERS ###########
# Set the parameters:#
today <- Sys.Date()											# Set the date that will go on the end of the files generated by this script#
today <- format(today, format="%m%d%y")#
##############################
##### Read in command line arguments;#
args <- commandArgs(trailingOnly=TRUE)#
path.to.GWAS <- args[1] # path to all of the GWAS files to be analyzed#
bed.file <- args[2] # path to the bed file containing all Maurano DHS peaks#
out.path <- args[3] # base folder to write out all files#
subfolder <- args[4] # subfolder to write the enrichment files to #
#
path.to.GWAS <- "/Users/erdavenport/clusterhome/poopQTL/14_seasons_individually/GEMMA_output_bacteria_winter_052614/"#
bed.file <- "/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/37_FC1to4_seasons_averaged/5_SNP_annotations_051514/table.349.Maurano.DHS.overlaps.with.Hutt.SNPS.051514ERD.txt"#
out.path <- "/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/39_FC1to4_seasons_individually/6_Maurano_enrichment_052814/winter/"#
subfolder <- "1_enrichments_052814/"
##### Create lists of all GWAS files:#
print("getting list of GWAS")#
GWAS <- list.files(path=path.to.GWAS, pattern=".assoc.")
BEDS <- read.table(file=bed.file, sep="\t", header=TRUE)
###### PARAMETERS ###########
# Set the parameters:#
today <- Sys.Date()											# Set the date that will go on the end of the files generated by this script#
today <- format(today, format="%m%d%y")#
##############################
##### Read in command line arguments:#
args <- commandArgs(trailingOnly=TRUE)#
tissue.file <- args[1] # tissue info file#
enrichment.path <- args[2] # path to enrichment files#
#
tissue.file <- "/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/37_FC1to4_seasons_averaged/6_Maurano_enrichment_051514/Maurano_Duke_DHS_cells_with_tissue_info_032514ERD.txt"
##### Load celltype data:#
celltypes <- read.table(file=tissue.file, sep="\t", header=TRUE, stringsAsFactors=FALSE)#
# rename that one lone ipsc:#
celltypes[which(celltypes[,4] == "induced pluripotent stem cell"),4] <- "ES or iPS"#
celltypes <- celltypes[which(celltypes$source == "UW"),]#
#
##### Load enrichment data:#
enri <- list.files(path=enrichment.path, sep=""))
enri <- list.files(path=enrichment.path, sep="")
enri <- list.files(path=enrichment.path)
length(enri)
tissue.file <- "/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/37_FC1to4_seasons_averaged/6_Maurano_enrichment_051514/Maurano_Duke_DHS_cells_with_tissue_info_032514ERD.txt"#
base.path <- "/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/39_FC1to4_seasons_individually/6_Maurano_enrichment_052814/winter/"#
enr.path <- "1_enrichments_052814/"
enri <- list.files(path=paste(base.path, enr.path, sep=""))
length(enri)
head(enri)
i <- 1
bacteria <- gsub("table.Maurano.enrichments.", "", gsub("\\.*ERD.txt", "", enri[i]))
bacteria
bacteria <- gsub("table.Maurano.enrichments.", "", gsub("\.*ERD.txt", "", enri[i]))
bacteria <- gsub("table.Maurano.enrichments.", "", gsub("\\.*ERD.txt", "", enri[i]))
bacteria
bacteria <- gsub("table.Maurano.enrichments.", "", gsub("\\.*ERD.txt", "", enri[i]))
bacteria
bacteria <- gsub("table.Maurano.enrichments.", "", gsub("\\.*.txt", "", enri[i]))
bacteria
bacteria <- gsub("table.Maurano.enrichments.", "", gsub("[.]*.txt", "", enri[i]))
bacteria
bacteria <- gsub("table.Maurano.enrichments.", "", gsub("[.]*txt", "", enri[i]))
bacteria
bacteria <- gsub("table.Maurano.enrichments.", "", gsub("[.]\\d*txt", "", enri[i]))
bacteria
bacteria <- gsub("table.Maurano.enrichments.", "", gsub("[.][0-9]*ERD.txt", "", enri[i]))
bacteria
?matrix
?apply
###### PARAMETERS ###########
# Set the parameters:#
today <- Sys.Date()							# Set the date that will go on the end of the files generated by this script#
today <- format(today, format="%m%d%y")#
output.path <- c("/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/39_FC1to4_seasons_individually/")	# path for all output to go into#
subfolder <- c("1_Initial_data_processing_052614/")		# Optional folder for putting initial data files into#
cor.cutoff = 0.9							# What Pearson correlation cutoff should be used?#
presence.cutoff = 0.75						# In what proportion of individuals should the bacteria be in?#
##############################
##### First, load in all levels of data across all individuals, both seasons:#
all.bacteria <- c()#
initial.bacteria <- c()#
print("Loading all initial bacteria proportion tables...")#
print("Number of taxa before any pruning:")#
for (a in c("phylum", "class", "order", "family", "genus")) {#
	data <- read.table(file=paste("/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/20_FC1to4_for_QTLs/FC1to4.subsampled.2mil.",a,".standardized.reps.combined.no.abs.052313ERD.txt", sep=""), sep="\t", header=TRUE)#
	print(c(a, dim(data)[1]))#
	initial.bacteria <- c(initial.bacteria, dim(data)[1])#
	all.bacteria <- rbind(all.bacteria, data)#
}#
print(c("all taxa", dim(all.bacteria)[1]))
##### Trim to just the individuals we're interested in looking at - eliminate the individual without genotype data:#
print("trimming individuals from full table:")#
all.bacteria.trimmed <- all.bacteria[,-grep("154112", colnames(all.bacteria))]#
#
# Separate into winter and summer to prune individuals:#
w.bacteria.trimmed <- all.bacteria.trimmed[,grep("W", colnames(all.bacteria.trimmed))]#
s.bacteria.trimmed <- all.bacteria.trimmed[,grep("S", colnames(all.bacteria.trimmed))]
dim(w.bacteria.trimmed)
dim(s.bacteria.trimmed)
boxplot(w.bacteria.trimmed, use.cols=TRUE)
boxplot(log10(w.bacteria.trimmed), use.cols=TRUE)
boxplot(log10(w.bacteria.trimmed[,1:10]), use.cols=TRUE)
boxplot(log10(w.bacteria.trimmed[,1:10]))
?boxplot
boxplot(as.matrix(log10(w.bacteria.trimmed[,1:10])))
class(w.bacteria.trimmed)
w.bacteria.trimmed[1:5,1:5]
w.bacteria.trimmed[1:5,1]
boxplot(w.bacteria.trimmed[1:5,1])
boxplot(w.bacteria.trimmed[1:5,1:2])
boxplot(w.bacteria.trimmed[1:5,1:5])
boxplot(w.bacteria.trimmed[1:5,1:10])
boxplot(w.bacteria.trimmed[1:300,1:10])
boxplot(log10(w.bacteria.trimmed[1:300,1:10]))
boxplot(log10(w.bacteria.trimmed[1:300,1:10]+ 0.0000000000001))
boxplot(log10(w.bacteria.trimmed+ 0.0000000000001))
boxplot(log10(w.bacteria.trimmed))
1/2000000
addon <- 1/2000000
boxplot(log10(w.bacteria.trimmed+addon), log10(s.bacteria.trimmed+addon), col=c(rep("blue", dim(w.bacteria.trimmed)[2]), rep("tomato", dim(s.bacteria.trimmed)[2])))
dim(w.bacteria.trimmed)
dim(s.bacteria.trimmed)
boxplot(log10(cbind(w.bacteria.trimmed+addon, s.bacteria.trimmed+addon)), col=c(rep("blue", dim(w.bacteria.trimmed)[2]), rep("tomato", dim(s.bacteria.trimmed)[2])))
boxplot(log10(cbind(w.bacteria.trimmed+addon, s.bacteria.trimmed+addon)), col=c(rep("blue", dim(w.bacteria.trimmed)[2]), rep("tomato", dim(s.bacteria.trimmed)[2])), main="log10 distribution of standardized bacterial abundance \nall bacteria", ylab="log10(abundance)", xlab="season")
?boxplot
boxplot(log10(cbind(w.bacteria.trimmed+addon, s.bacteria.trimmed+addon)), col=c(rep("blue", dim(w.bacteria.trimmed)[2]), rep("tomato", dim(s.bacteria.trimmed)[2])), main="log10 distribution of standardized bacterial abundance \nall bacteria", ylab="log10(abundance)", xlab="season", names=NULL)
boxplot(log10(cbind(w.bacteria.trimmed+addon, s.bacteria.trimmed+addon)), col=c(rep("blue", dim(w.bacteria.trimmed)[2]), rep("tomato", dim(s.bacteria.trimmed)[2])), main="log10 distribution of standardized bacterial abundance \nall bacteria", ylab="log10(abundance)", xlab="season", names=" ")
boxplot(log10(cbind(w.bacteria.trimmed+addon, s.bacteria.trimmed+addon)), col=c(rep("blue", dim(w.bacteria.trimmed)[2]), rep("tomato", dim(s.bacteria.trimmed)[2])), main="log10 distribution of standardized bacterial abundance \nall bacteria", ylab="log10(abundance)", xlab="season", names=rep("", dim(cbind(w.bacteria.trimmed, s.bacteria.trimmed))[2]))
?bxp
bxp(log10(cbind(w.bacteria.trimmed+addon, s.bacteria.trimmed+addon)), col=c(rep("blue", dim(w.bacteria.trimmed)[2]), rep("tomato", dim(s.bacteria.trimmed)[2])), main="log10 distribution of standardized bacterial abundance \nall bacteria", ylab="log10(abundance)", xlab="season", names=rep("", dim(cbind(w.bacteria.trimmed, s.bacteria.trimmed))[2]))
mybxp <- boxplot(log10(cbind(w.bacteria.trimmed+addon, s.bacteria.trimmed+addon)), col=c(rep("blue", dim(w.bacteria.trimmed)[2]), rep("tomato", dim(s.bacteria.trimmed)[2])), main="log10 distribution of standardized bacterial abundance \nall bacteria", ylab="log10(abundance)", xlab="season", names=rep("", dim(cbind(w.bacteria.trimmed, s.bacteria.trimmed))[2]))
bxp(mybxp)
bxp(mybxp, col=c(rep("blue", dim(w.bacteria.trimmed)[2]), rep("tomato", dim(s.bacteria.trimmed)[2])), main="log10 distribution of standardized bacterial abundance \nall bacteria", ylab="log10(abundance)", xlab="season", names=rep("", dim(cbind(w.bacteria.trimmed, s.bacteria.trimmed))[2]))
bxp(mybxp, boxfill=c(rep("blue", dim(w.bacteria.trimmed)[2]), rep("tomato", dim(s.bacteria.trimmed)[2])), main="log10 distribution of standardized bacterial abundance \nall bacteria", ylab="log10(abundance)", xlab="season", names=rep("", dim(cbind(w.bacteria.trimmed, s.bacteria.trimmed))[2]), pch=16)
bxp(mybxp, boxfill=c(rep("blue", dim(w.bacteria.trimmed)[2]), rep("tomato", dim(s.bacteria.trimmed)[2])), main="log10 distribution of standardized bacterial abundance \nall bacteria", ylab="log10(abundance)", xlab="season", names=rep("", dim(cbind(w.bacteria.trimmed, s.bacteria.trimmed))[2]), outpch=16, outcex=0.1)
legend("topright", fill=c("blue", "red"), legend=c("winter", "summer"))
?legend
bxp(mybxp, boxfill=c(rep("blue", dim(w.bacteria.trimmed)[2]), rep("tomato", dim(s.bacteria.trimmed)[2])), main="log10 distribution of standardized bacterial abundance \nall bacteria", ylab="log10(abundance)", xlab="season", names=rep("", dim(cbind(w.bacteria.trimmed, s.bacteria.trimmed))[2]), outpch=16, outcex=0.1)#
legend("topright", fill=c("blue", "red"), legend=c("winter", "summer"), bty="n")
pdf(paste(output.path, subfolder,"boxplot.distribution.of.bacteria.abundances.all.bacteria.",today,"ERD.pdf", sep=""))#
bxp(mybxp, boxfill=c(rep("blue", dim(w.bacteria.trimmed)[2]), rep("tomato", dim(s.bacteria.trimmed)[2])), main="log10 distribution of standardized bacterial abundance \nall bacteria", ylab="log10(abundance)", xlab="season", names=rep("", dim(cbind(w.bacteria.trimmed, s.bacteria.trimmed))[2]), outpch=16, outcex=0.1)#
legend("topright", fill=c("blue", "red"), legend=c("winter", "summer"), bty="n")#
dev.off()
##### Prune the bacteria that are lower than the presence cutoff in each season:#
print(paste("Pruning bacteria that are in fewer than ",presence.cutoff*100,"% of individuals...", sep=""))#
zeros <- c()#
for (i in 1:dim(w.bacteria.trimmed)[1]) {#
	x <- 0#
	for (j in 1:dim(w.bacteria.trimmed)[2]) {#
        if (w.bacteria.trimmed[i,j] == 0 ) {#
        	x <- x+1#
    	}#
    }#
    zeros <- c(zeros, x)#
}#
w.perc <- 1-zeros/dim(w.bacteria.trimmed)[2]#
#
zeros <- c()#
for (i in 1:dim(s.bacteria.trimmed)[1]) {#
	x <- 0#
	for (j in 1:dim(s.bacteria.trimmed)[2]) {#
        if (s.bacteria.trimmed[i,j] == 0 ) {#
        	x <- x+1#
    	}#
    }#
    zeros <- c(zeros, x)#
}#
s.perc <- 1-zeros/dim(s.bacteria.trimmed)[2]
# Eliminate bacteria that are present in fewer individuals than the presence.cutoff:#
w.QTL.taxa <- w.bacteria.trimmed[-which(w.perc <= presence.cutoff), ] #
s.QTL.taxa <- s.bacteria.trimmed[-which(s.perc <= presence.cutoff), ] #
#
print(paste("number of taxa remaining: winter = ", dim(w.QTL.taxa)[1], " summer = ", dim(s.QTL.taxa)[1], sep=""))
dim(w.QTL.taxa)
dim(s.QTL.taxa)
mybxp <- boxplot(log10(w.QTL.taxa+addon))
pdf(paste(output.path, subfolder,"boxplot.distribution.of.bacteria.abundances.winter.common.",today,"ERD.pdf", sep=""))#
bxp(mybxp, boxfill=c(rep("blue", dim(w.QTL.taxa)[2])), main="log10 distribution of standardized bacterial abundance \nwinter common", ylab="log10(abundance)", xlab="season", names=rep("", dim(w.QTL.taxa)[2]), outpch=16, outcex=0.1)#
legend("topright", fill=c("blue"), legend=c("winter"), bty="n")#
dev.off()
addon <- 1/2000001 # to get rid of zeros so we can log transform data#
mybxp <- boxplot(log10(w.QTL.taxa+addon))#
#
pdf(paste(output.path, subfolder,"boxplot.distribution.of.bacteria.abundances.winter.common.",today,"ERD.pdf", sep=""))#
bxp(mybxp, boxfill=c(rep("blue", dim(w.QTL.taxa)[2])), main="log10 distribution of standardized bacterial abundance \nwinter common", ylab="log10(abundance)", xlab="season", names=rep(" ", dim(w.QTL.taxa)[2]), outpch=16, outcex=0.1)#
legend("topright", fill=c("blue"), legend=c("winter"), bty="n")#
dev.off()
pdf(paste(output.path, subfolder,"boxplot.distribution.of.bacteria.abundances.winter.common.",today,"ERD.pdf", sep=""))#
bxp(mybxp, boxfill=c(rep("blue", dim(w.QTL.taxa)[2])), main="log10 distribution of standardized bacterial abundance \nwinter common", ylab="log10(abundance)", xlab="season", show.names=FALSE, outpch=16, outcex=0.1)#
legend("topright", fill=c("blue"), legend=c("winter"), bty="n")#
dev.off()
mybxp <- boxplot(log10(s.QTL.taxa+addon))#
pdf(paste(output.path, subfolder,"boxplot.distribution.of.bacteria.abundances.summer.common.",today,"ERD.pdf", sep=""))#
bxp(mybxp, boxfill=c(rep("tomato", dim(s.QTL.taxa)[2])), main="log10 distribution of standardized bacterial abundance \nsummer common", ylab="log10(abundance)", xlab="season", show.names=FALSE, outpch=16, outcex=0.1)#
legend("topright", fill=c("tomato"), legend=c("summer"), bty="n")#
dev.off()
?boxplot
addon <- 1/2000001 # to get rid of zeros so we can log transform data#
mybxp <- boxplot(log10(w.QTL.taxa+addon), plot=FALSE)#
#
pdf(paste(output.path, subfolder,"boxplot.distribution.of.bacteria.abundances.winter.common.",today,"ERD.pdf", sep=""))#
bxp(mybxp, boxfill=c(rep("blue", dim(w.QTL.taxa)[2])), main="log10 distribution of standardized bacterial abundance \nwinter common", ylab="log10(abundance)", xlab="season", show.names=FALSE, outpch=16, outcex=0.1)#
legend("topright", fill=c("blue"), legend=c("winter"), bty="n")#
dev.off()#
#
mybxp <- boxplot(log10(s.QTL.taxa+addon), plot=FALSE)#
pdf(paste(output.path, subfolder,"boxplot.distribution.of.bacteria.abundances.summer.common.",today,"ERD.pdf", sep=""))#
bxp(mybxp, boxfill=c(rep("tomato", dim(s.QTL.taxa)[2])), main="log10 distribution of standardized bacterial abundance \nsummer common", ylab="log10(abundance)", xlab="season", show.names=FALSE, outpch=16, outcex=0.1)#
legend("topright", fill=c("tomato"), legend=c("summer"), bty="n")#
dev.off()
print("qqnorming data")#
w.log.QTL.data <- matrix(NA, ncol=dim(w.QTL.taxa)[2], nrow=dim(w.QTL.taxa)[1])#
s.log.QTL.data <- matrix(NA, ncol=dim(s.QTL.taxa)[2], nrow=dim(s.QTL.taxa)[1])#
#
# By bacteria:#
# Randomly shuffle assignments to break ties w/qqnorm:#
for (i in 1:dim(w.QTL.taxa)[1]) {#
	x <- sample(1:dim(w.QTL.taxa)[2])#
	normed <- qqnorm(w.QTL.taxa[i,x], plot.it=FALSE)$x#
	w.log.QTL.data[i,] <- normed[order(x)]#
}#
#
for (i in 1:dim(s.QTL.taxa)[1]) {#
	x <- sample(1:dim(s.QTL.taxa)[2])#
	normed <- qqnorm(s.QTL.taxa[i,x], plot.it=FALSE)$x#
	s.log.QTL.data[i,] <- qqnorm(s.QTL.taxa[i,], plot.it=F)$x#
}#
#
colnames(w.log.QTL.data) <- colnames(w.QTL.taxa)#
rownames(w.log.QTL.data) <- rownames(w.QTL.taxa)#
colnames(s.log.QTL.data) <- colnames(s.QTL.taxa)#
rownames(s.log.QTL.data) <- rownames(s.QTL.taxa)
##### boxplots of winter and summer after normalization across bacteria:#
mybxp <- boxplot(w.log.QTL.data, plot=FALSE)#
#
pdf(paste(output.path, subfolder,"boxplot.distribution.of.bacteria.abundances.winter.common.normalized.",today,"ERD.pdf", sep=""))#
bxp(mybxp, boxfill=c(rep("blue", dim(w.log.QTL.data)[2])), main="log10 distribution of standardized bacterial abundance \nwinter common normalized", ylab="normalized abundance", xlab="season", show.names=FALSE, outpch=16, outcex=0.1)#
legend("topright", fill=c("blue"), legend=c("winter"), bty="n")#
dev.off()#
#
mybxp <- boxplot(s.log.QTL.data, plot=FALSE)#
pdf(paste(output.path, subfolder,"boxplot.distribution.of.bacteria.abundances.summer.common.normalized",today,"ERD.pdf", sep=""))#
bxp(mybxp, boxfill=c(rep("tomato", dim(s.log.QTL.data)[2])), main="log10 distribution of standardized bacterial abundance \nsummer common normalized", ylab="normalized abundance", xlab="season", show.names=FALSE, outpch=16, outcex=0.1)#
legend("topright", fill=c("tomato"), legend=c("summer"), bty="n")#
dev.off()
?par
###### PARAMETERS ###########
# Set the parameters:#
today <- Sys.Date()											# Set the date that will go on the end of the files generated by this script#
today <- format(today, format="%m%d%y")#
file.path <- c("/Users/erdavenport/clusterhome/poopQTL/12_seasons_averaged/GEMMA_output_bacteria_051414/")#
out.path <- c("/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/37_FC1to4_seasons_averaged/3_GEMMA_for_bacteria_051414/")#
##############################
##### Read list of all bacteria log files:#
print("read in bacteria log files")#
files <- list.files(path=file.path, pattern=".log.")#
##### Read in all PVEs and sd(PVE):#
print("read in PVEs")#
all.pves <- c()#
for (i in 1:length(files)) {#
	log <- read.table(file=paste(file.path, files[i], sep=""), sep="\t", comment.char="?", stringsAsFactors=FALSE)$V1#
	pve <- gsub("## pve estimate in the null model = ", "", log[grep("pve estimate", log)])#
	sdpve <- strsplit(log[grep("pve estimate", log)+1], split = " ")[[1]][8]#
	bacteria <- gsub("GWAS.127.season.averaged.bacteria.", "", gsub(".column.*.out.051414ERD.log.txt", "", files[i]))#
	all.pves <- rbind(all.pves, c(bacteria, pve, sdpve))#
}	#
#
sig <- c()#
##### Do any of the bacteria display chip heritability:#
print("checking if any are heritable")#
for (i in 1:dim(all.pves)[1]) {#
	if (all.pves[i,3] == "nan" ) {#
		sig <- c(sig, "x")#
	} else if (as.numeric(all.pves[i,2]) > as.numeric(all.pves[i,3])) {#
		sig <- c(sig, "heritable")#
	} else {#
		sig <- c(sig, "x")#
	}#
}#
#
tozero <- (as.numeric(all.pves[,2])-as.numeric(all.pves[,3]))#
tozero[is.na(tozero)] <- -1000#
#
ordered.sig <- all.pves[order(tozero, decreasing=TRUE),]#
ordered.sig[which(ordered.sig == "nan")] <- 0#
##### Plot chip heritability with standard error:#
print("plotting PVE with SE")#
pdf(paste(out.path, "plot.PVE.by.bacteria.with.standard.error.",today,"ERD.pdf", sep=""))#
plot(1:dim(ordered.sig)[1], ordered.sig[,2], pch=16, col="plum4", ylim=c(0,1), xlab="bacteria", ylab="PVE", main="PVE with standard errors")#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])-as.numeric(ordered.sig[,3])), length=0, col="gray")#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])+as.numeric(ordered.sig[,3])), length=0, col="gray")#
dev.off()
par(mai=c(.7,1,.7,.5), xaxt="n")#
plot(1:dim(ordered.sig)[1], ordered.sig[,2], pch=16, col="plum4", ylim=c(0,1), xlab="", ylab="PVE", main="PVE", cex.axis=1.5, cex.main=2, cex.lab=1.7)#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])-as.numeric(ordered.sig[,3])), length=0, col="gray")#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])+as.numeric(ordered.sig[,3])), length=0, col="gray")#
mtext(side = 1, text = "bacteria", line = 4)
mtext(side = 1, text = "bacteria", line = 1)
?mtext
par(mai=c(.7,1,.7,.5), xaxt="n")#
plot(1:dim(ordered.sig)[1], ordered.sig[,2], pch=16, col="plum4", ylim=c(0,1), xlab="", ylab="PVE", main="PVE", cex.axis=1.3, cex.main=2)#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])-as.numeric(ordered.sig[,3])), length=0, col="gray")#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])+as.numeric(ordered.sig[,3])), length=0, col="gray")#
mtext(side = 1, text = "bacteria", line = 1, cex=1.5)#
mtext(side = 2, text = "PVE", line = 2, cex=1.5)
par(mai=c(.5,1,.7,.5), xaxt="n")#
plot(1:dim(ordered.sig)[1], ordered.sig[,2], pch=16, col="plum4", ylim=c(0,1), xlab="", main="PVE", cex.axis=1.3, cex.main=2)#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])-as.numeric(ordered.sig[,3])), length=0, col="gray")#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])+as.numeric(ordered.sig[,3])), length=0, col="gray")#
mtext(side = 1, text = "bacteria", line = 1, cex=1.5)#
mtext(side = 2, text = "PVE", line = 3, cex=1.5)
par(mai=c(.5,1,.7,.5), xaxt="n")#
plot(1:dim(ordered.sig)[1], ordered.sig[,2], pch=16, col="plum4", ylim=c(0,1), xlab="", ylab="", main="PVE", cex.axis=1.3, cex.main=2)#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])-as.numeric(ordered.sig[,3])), length=0, col="gray")#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])+as.numeric(ordered.sig[,3])), length=0, col="gray")#
mtext(side = 1, text = "bacteria", line = 1, cex=1.5)#
mtext(side = 2, text = "PVE", line = 3, cex=1.5)
par(mai=c(.5,1,.7,.3), xaxt="n")#
plot(1:dim(ordered.sig)[1], ordered.sig[,2], pch=16, col="plum4", ylim=c(0,1), xlab="", ylab="", main="PVE", cex.axis=1.3, cex.main=2)#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])-as.numeric(ordered.sig[,3])), length=0, col="gray")#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])+as.numeric(ordered.sig[,3])), length=0, col="gray")#
mtext(side = 1, text = "bacteria", line = 1, cex=1.5)#
mtext(side = 2, text = "PVE", line = 3, cex=1.5)
par(mai=c(.5,1,.7,.3), xaxt="n")#
plot(1:dim(ordered.sig)[1], ordered.sig[,2], yaxt="n" pch=16, col="plum4", ylim=c(0,1), xlab="", ylab="", main="PVE", cex.axis=1.3, cex.main=2)#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])-as.numeric(ordered.sig[,3])), length=0, col="gray")#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])+as.numeric(ordered.sig[,3])), length=0, col="gray")#
axis(2, at=c(0.0, 0.2, 0.4, 0.6, 0.8, 1.0), labels=c("0%", "20%", "40%", "60%", "80%", "100%"))#
mtext(side = 1, text = "bacteria", line = 1, cex=1.5)#
mtext(side = 2, text = "PVE", line = 3, cex=1.5)
par(mai=c(.5,1,.7,.3), xaxt="n")#
plot(1:dim(ordered.sig)[1], ordered.sig[,2], yaxt="n", pch=16, col="plum4", ylim=c(0,1), xlab="", ylab="", main="PVE", cex.axis=1.3, cex.main=2)#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])-as.numeric(ordered.sig[,3])), length=0, col="gray")#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])+as.numeric(ordered.sig[,3])), length=0, col="gray")#
axis(2, at=c(0.0, 0.2, 0.4, 0.6, 0.8, 1.0), labels=c("0%", "20%", "40%", "60%", "80%", "100%"))#
mtext(side = 1, text = "bacteria", line = 1, cex=1.5)#
mtext(side = 2, text = "PVE", line = 3, cex=1.5)
par(mai=c(.5,1,.7,.3), xaxt="n")#
plot(1:dim(ordered.sig)[1], ordered.sig[,2], yaxt="n", pch=16, col="plum4", ylim=c(0,1), xlab="", ylab="", main="PVE", cex.axis=1.3, cex.main=2)#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])-as.numeric(ordered.sig[,3])), length=0, col="gray")#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])+as.numeric(ordered.sig[,3])), length=0, col="gray")#
axis(2, at=c(0.0, 0.2, 0.4, 0.6, 0.8, 1.0), labels=c("0%", "20%", "40%", "60%", "80%", "100%"), cex=1.3)#
mtext(side = 1, text = "bacteria", line = 1, cex=1.5)#
mtext(side = 2, text = "PVE", line = 3, cex=1.5)
par(mai=c(.5,1,.7,.3), xaxt="n")#
plot(1:dim(ordered.sig)[1], ordered.sig[,2], yaxt="n", pch=16, col="plum4", ylim=c(0,1), xlab="", ylab="", main="PVE", cex.axis=1.3, cex.main=2)#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])-as.numeric(ordered.sig[,3])), length=0, col="gray")#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])+as.numeric(ordered.sig[,3])), length=0, col="gray")#
axis(2, at=c(0.0, 0.2, 0.4, 0.6, 0.8, 1.0), labels=c("0%", "20%", "40%", "60%", "80%", "100%"), cex=1.5)#
mtext(side = 1, text = "bacteria", line = 1, cex=1.5)#
mtext(side = 2, text = "PVE", line = 3, cex=1.5)
?axis
par(mai=c(.5,1,.7,.3), xaxt="n")#
plot(1:dim(ordered.sig)[1], ordered.sig[,2], yaxt="n", pch=16, col="plum4", ylim=c(0,1), xlab="", ylab="", main="PVE", cex.axis=1.3, cex.main=2)#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])-as.numeric(ordered.sig[,3])), length=0, col="gray")#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])+as.numeric(ordered.sig[,3])), length=0, col="gray")#
axis(2, at=c(0.0, 0.2, 0.4, 0.6, 0.8, 1.0), labels=c("0%", "20%", "40%", "60%", "80%", "100%"), cex=1.5)#
mtext(side = 1, text = "bacteria", line = 1, cex=1.5)#
mtext(side = 2, text = "PVE", line = 3, cex.axis=1.5)
par(mai=c(.5,1,.7,.3), xaxt="n", cex.axis=1.4)#
plot(1:dim(ordered.sig)[1], ordered.sig[,2], yaxt="n", pch=16, col="plum4", ylim=c(0,1), xlab="", ylab="", main="PVE", cex.axis=1.3, cex.main=2)#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])-as.numeric(ordered.sig[,3])), length=0, col="gray")#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])+as.numeric(ordered.sig[,3])), length=0, col="gray")#
axis(2, at=c(0.0, 0.2, 0.4, 0.6, 0.8, 1.0), labels=c("0%", "20%", "40%", "60%", "80%", "100%"), cex=1.5)#
mtext(side = 1, text = "bacteria", line = 1, cex=1.5)#
mtext(side = 2, text = "PVE", line = 3)
par(mai=c(.5,1,.7,.3), xaxt="n", cex.axis=1.2)#
plot(1:dim(ordered.sig)[1], ordered.sig[,2], yaxt="n", pch=16, col="plum4", ylim=c(0,1), xlab="", ylab="", main="PVE", cex.axis=1.3, cex.main=2)#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])-as.numeric(ordered.sig[,3])), length=0, col="gray")#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])+as.numeric(ordered.sig[,3])), length=0, col="gray")#
axis(2, at=c(0.0, 0.2, 0.4, 0.6, 0.8, 1.0), labels=c("0%", "20%", "40%", "60%", "80%", "100%"), cex=1.5)#
mtext(side = 1, text = "bacteria", line = 1, cex=1.5)#
mtext(side = 2, text = "PVE", line = 3, cex=1.5)
pdf(paste(out.path, "plot.PVE.by.bacteria.with.standard.error.POSTER.",today,"ERD.pdf", sep=""), height=6, width=8)#
par(mai=c(.5,1,.7,.3), xaxt="n", cex.axis=1.2)#
plot(1:dim(ordered.sig)[1], ordered.sig[,2], yaxt="n", pch=16, col="plum4", ylim=c(0,1), xlab="", ylab="", main="PVE", cex.axis=1.3, cex.main=2)#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])-as.numeric(ordered.sig[,3])), length=0, col="gray")#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])+as.numeric(ordered.sig[,3])), length=0, col="gray")#
axis(2, at=c(0.0, 0.2, 0.4, 0.6, 0.8, 1.0), labels=c("0%", "20%", "40%", "60%", "80%", "100%"), cex=1.5)#
mtext(side = 1, text = "bacteria", line = 1, cex=1.5)#
mtext(side = 2, text = "PVE", line = 3, cex=1.5)#
dev.off()
pdf(paste(out.path, "plot.PVE.by.bacteria.with.standard.error.POSTER.",today,"ERD.pdf", sep=""), height=6, width=6)#
par(mai=c(.5,1,.7,.3), xaxt="n", cex.axis=1.2)#
plot(1:dim(ordered.sig)[1], ordered.sig[,2], yaxt="n", pch=16, col="plum4", ylim=c(0,1), xlab="", ylab="", main="PVE", cex.axis=1.3, cex.main=2)#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])-as.numeric(ordered.sig[,3])), length=0, col="gray")#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])+as.numeric(ordered.sig[,3])), length=0, col="gray")#
axis(2, at=c(0.0, 0.2, 0.4, 0.6, 0.8, 1.0), labels=c("0%", "20%", "40%", "60%", "80%", "100%"), cex=1.5)#
mtext(side = 1, text = "bacteria", line = 1, cex=1.5)#
mtext(side = 2, text = "PVE", line = 3, cex=1.5)#
dev.off()
pdf(paste(out.path, "plot.PVE.by.bacteria.with.standard.error.POSTER.",today,"ERD.pdf", sep=""), height=6, width=6)#
par(mai=c(.5,1,.7,.3), xaxt="n", cex.axis=1.2)#
plot(1:dim(ordered.sig)[1], ordered.sig[,2], yaxt="n", pch=16, col="plum4", ylim=c(0,1), xlab="", ylab="", main='"Chip" heritability of bacteria', cex.axis=1.3, cex.main=2)#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])-as.numeric(ordered.sig[,3])), length=0, col="gray")#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])+as.numeric(ordered.sig[,3])), length=0, col="gray")#
axis(2, at=c(0.0, 0.2, 0.4, 0.6, 0.8, 1.0), labels=c("0%", "20%", "40%", "60%", "80%", "100%"), cex=1.5)#
mtext(side = 1, text = "bacteria", line = 1, cex=1.5)#
mtext(side = 2, text = "PVE", line = 3, cex=1.5)#
dev.off()
pdf(paste(out.path, "plot.PVE.by.bacteria.with.standard.error.POSTER.",today,"ERD.pdf", sep=""), height=6, width=6)#
par(mai=c(.5,1,.7,.3), xaxt="n", cex.axis=1.2)#
plot(1:dim(ordered.sig)[1], ordered.sig[,2], yaxt="n", pch=16, col="plum4", ylim=c(0,1), xlab="", ylab="", main='"Chip" heritability of bacteria', cex.axis=1.3, cex.main=1.8)#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])-as.numeric(ordered.sig[,3])), length=0, col="gray")#
arrows(x0 = 1:dim(ordered.sig)[1], y0 = as.numeric(ordered.sig[,2]), y1 = (as.numeric(ordered.sig[,2])+as.numeric(ordered.sig[,3])), length=0, col="gray")#
axis(2, at=c(0.0, 0.2, 0.4, 0.6, 0.8, 1.0), labels=c("0%", "20%", "40%", "60%", "80%", "100%"), cex=1.5)#
mtext(side = 1, text = "bacteria", line = 1, cex=1.5)#
mtext(side = 2, text = "PVE", line = 3, cex=1.5)#
dev.off()
###### PARAMETERS ###########
# Set the parameters:#
today <- Sys.Date()											# Set the date that will go on the end of the files generated by this script#
today <- format(today, format="%m%d%y")#
input.path <- c("/Users/erdavenport/clusterhome/poopQTL/12_seasons_averaged/GEMMA_output_bacteria_051414/") 	# path to all trait association files#
cluster.out <- c("/Users/erdavenport/clusterhome/poopQTL/12_seasons_averaged/GEMMA_output_bacteria_qvals_051414/") # path to save the qvals to#
output.path <- c("/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/37_FC1to4_seasons_averaged/")	# path for all output to go into#
subfolder <- c("3_GEMMA_for_bacteria_051414/")					# Optional folder for putting initial data files into#
##############################
##### Load libraries:#
library(gap)#
library(qvalue)#
##### Generate list of all association files from the current folder:#
files <- list.files(path=input.path, pattern="assoc")
lenght(files)
length(files)
files <- files[grep("Akk", files)]
files
i <- 1
print(i)#
	bacteria <- gsub("GWAS.127.season.averaged.bacteria.", "", gsub(".column..*.out..*.assoc.txt", "", files[i]))#
	data <- read.table(paste(input.path,files[i], sep=""), sep="\t", header=TRUE, colClasses=c("numeric", "character", "numeric", "numeric", "character", "character", "numeric", "numeric", "numeric"))#
	# qvalues:#
	q_lrt <- qvalue(data$p_lrt)$qvalues#
	data <- cbind(data, q_lrt)
assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19)#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, sep=""), cex.main=1.5)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}
?mhtplot
par(mai=c(1,1,1,1))#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19)#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.5)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}
if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=1600, height=800)#
		par(mfrow=c(1,2))#
#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19)#
		axis(2, pos=2, at=0:maxy)#
		title(paste(bacteria, cex.main=1.5)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=1600, height=800)#
		par(mfrow=c(1,2))#
#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19)#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.5)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
	}
today <- Sys.Date()											# Set the date that will go on the end of the files generated by this script#
today <- format(today, format="%m%d%y")#
input.path <- c("/Users/erdavenport/clusterhome/poopQTL/12_seasons_averaged/GEMMA_output_bacteria_051414/") 	# path to all trait association files#
cluster.out <- c("/Users/erdavenport/clusterhome/poopQTL/12_seasons_averaged/GEMMA_output_bacteria_qvals_051414/") # path to save the qvals to#
output.path <- c("/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/37_FC1to4_seasons_averaged/")	# path for all output to go into#
subfolder <- c("3_GEMMA_for_bacteria_051414/")					# Optional folder for putting initial data files into
if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=1600, height=800)#
		par(mfrow=c(1,2))#
#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19)#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.5)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
	}
dev.off()
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=800, height=800)#
		#par(mfrow=c(1,2))#
#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19)#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.5)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
?axis
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=800, height=800)#
		#par(mfrow=c(1,2))#
		par(cex.axis=1.6#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19)#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=800, height=800)#
		#par(mfrow=c(1,2))#
		par(cex.axis=1.6)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19)#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=800, height=800)#
		#par(mfrow=c(1,2))#
		par(cex.axis=1.6)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=3) # labels=NULL)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19)#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=800, height=800)#
		#par(mfrow=c(1,2))#
		par(cex.axis=1.6)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2, srt=0) # labels=NULL)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19)#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=800, height=800)#
		#par(mfrow=c(1,2))#
		par(cex.axis=1.6)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2, labels=NULL)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19)#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=800, height=800)#
		#par(mfrow=c(1,2))#
		par(cex.axis=1.6)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2, labels=NULL)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab="-log10(p)")#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=800, height=800)#
		#par(mfrow=c(1,2))#
		par(cex.axis=1.6)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2, labels=NULL)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab="-log10(p)", cex.axis=1.8)#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=800, height=800)#
		#par(mfrow=c(1,2))#
		par(cex.axis=1.5, cex.lab=1.8)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2, labels=NULL)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab="-log10(p)")#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=800, height=800)#
		#par(mfrow=c(1,2))#
		par(cex.axis=1.5, cex.lab=1.8)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2, labels=NULL)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab="-log10(p)", cex.lab=1.8)#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
?par
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=800, height=800)#
		#par(mfrow=c(1,2))#
		par(cex = 1, cex.axis=1.5, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2, labels=NULL)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab="-log10(p)")#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
mht.control
?mht.control
?mhtplot
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=800, height=800)#
		#par(mfrow=c(1,2))#
		par(cex = 1, cex.axis=1.5, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2, labels=NULL)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ")#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=800, height=800)#
		#par(mfrow=c(1,2))#
		par(cex = 1, cex.axis=1.5, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=1, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ")#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=800, height=800)#
		#par(mfrow=c(1,2))#
		par(cex = 1, cex.axis=1.5, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ")#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=800, height=500)#
		#par(mfrow=c(1,2))#
		par(cex = 1, cex.axis=1.5, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ")#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=600, height=300)#
		#par(mfrow=c(1,2))#
		par(mai = c(.5,1,1,.4), cex = 1, cex.axis=1.5, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ")#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
max(-log10(assoc$p_lrt)
)
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=600, height=300)#
		#par(mfrow=c(1,2))#
		par(mai = c(.5,1,1,.4), cex = 1, cex.axis=1.5, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
?png
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=600, height=300, res=600)#
		#par(mfrow=c(1,2))#
		par(mai = c(.5,1,1,.4), cex = 1, cex.axis=1.5, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=6, height=3, res=600)#
		#par(mfrow=c(1,2))#
		par(mai = c(.5,1,1,.4), cex = 1, cex.axis=1.5, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=6, height=3, units="in", res=1200)#
		#par(mfrow=c(1,2))#
		par(mai = c(.5,1,1,.4), cex = 1, cex.axis=1.5, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=5, height=2.5, units="in", res=1200)#
		#par(mfrow=c(1,2))#
		par(mai = c(.25,.5,.5,.2), cex = 1, cex.axis=1.2, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.5)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=5, height=2.5, units="in", res=1200)#
		#par(mfrow=c(1,2))#
		par(mai = c(.25,.5,.5,.2), cex = 1, cex.axis=1.2, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=.7, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=.7, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=.7, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=5, height=2.5, units="in", res=1200)#
		#par(mfrow=c(1,2))#
		par(mai = c(.25,.5,.5,.2), cex = 1, cex.axis=.9, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=.5, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=5, height=2.5, units="in", res=1200)#
		#par(mfrow=c(1,2))#
		par(mai = c(.25,.5,.5,.2), cex = 1, cex.axis=.4, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=.5, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=5, height=2.5, units="in", res=1200)#
		#par(mfrow=c(1,2))#
		par(mai = c(.25,.5,.5,.2), cex = 1, cex.axis=.8, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=.5, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=5, height=2.5, units="in", res=600)#
		#par(mfrow=c(1,2))#
		par(mai = c(.25,.5,.5,.2), cex = 1, cex.axis=.8, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=.5, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=5*72, height=2.5*72, res=72)#
		#par(mfrow=c(1,2))#
		par(mai = c(.25,.5,.5,.2), cex = 1, cex.axis=.8, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=.5, col="plum4")#
		}#
		dev.off()#
	}
if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=5, height=2.5, unit="in", pointsize=4, res=1200)#
		#par(mfrow=c(1,2))#
		par(mai = c(.25,.5,.5,.2), cex = 1, cex.axis=.8, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=.5, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=5, height=2.5, unit="in", pointsize=4, res=600)#
		#par(mfrow=c(1,2))#
		par(mai = c(.25,.5,.5,.2), cex = 1, cex.axis=.8, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=.5, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		#png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=5, height=2.5, unit="in", pointsize=4, res=600)#
		pdf(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.pdf", sep=""), width=5, height=2.5)#
		#par(mfrow=c(1,2))#
		par(mai = c(.25,.5,.5,.2), cex = 1, cex.axis=.8, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=.5, col="plum4")#
		}#
		dev.off()#
	}
###### PARAMETERS ###########
# Set the parameters:#
today <- Sys.Date()											# Set the date that will go on the end of the files generated by this script#
today <- format(today, format="%m%d%y")#
input.path <- c("/Users/erdavenport/clusterhome/poopQTL/12_seasons_averaged/GEMMA_output_bacteria_051414/eQTL_plot_files_051414/") 	# path to all trait association files#
output.path <- c("/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/37_FC1to4_seasons_averaged/")	# path for all output to go into#
subfolder <- c("3_GEMMA_for_bacteria_051414/")					# Optional folder for putting initial data files into#
##############################
##### Load table of bacteria, snps, and pvalues:#
assns <- read.table(file=paste(output.path,subfolder,"all_sig_SNPs_from_bacteria_GWAS_051414ERD.txt", sep=""), sep="\t", header=TRUE)#
phenos <- read.table(file=paste(output.path,subfolder,"hutt.3chip.hg19remap.127.seasons.averaged.with.labs.051414ERD.fam", sep=""), sep=" ", header=TRUE)#
alleles <- read.table(file=paste(input.path,"major_minor_alleles_for_eQTL_plots_051414ERD.txt", sep=""), sep="\t", header=FALSE)
length(assns)
head(assns)
assns <- assns[5,]
assns
?round
##### Create plot for each bacteria:#
for (i in 1:dim(assns)[1]) {#
	print(paste("generating plot for ",assns$bacteria[i]," (",i,")", sep=""))#
	# load in allele information for all individuals:#
	raw <- read.table(file=paste(input.path,"recode_",assns$rs[i],"_",assns$bacteria[i],"_051414ERD.txt.ped", sep=""), sep=" ", header=FALSE)#
	# list of alleles:#
	allele <- c(0, as.character(alleles[which(alleles$V2 == assns$rs[i]),5]), as.character(alleles[which(alleles$V2 == assns$rs[i]),6]))#
	# add phenotype to allele information:#
	raw$pheno <- phenos[,which(colnames(phenos) == assns$bacteria[i])]#
	# Look at only the individuals where we have a phenotype:#
	raw <- raw[-which(raw$pheno == -9),]#
	# Look at only the individuals where we have genotypes:#
	if (length(which(raw$V7 == 0)) > 0) {#
		raw <- raw[-which(raw$V7 == 0),]#
	}#
	# Code the genotypes:#
	genotype <- c()#
	for (j in 1:dim(raw)[1]) {#
		if (raw$V7[j] == allele[2] & raw$V8[j] == allele[2]) {#
			genotype <- c(genotype, paste(allele[2],allele[2], sep=""))#
		} else if (raw$V7[j] == allele[3] & raw$V8[j] == allele[3]) {#
			genotype <- c(genotype, paste(allele[3],allele[3], sep=""))#
		} else {#
			genotype <- c(genotype, paste(allele[2],allele[3], sep=""))#
		}#
	}#
#
	raw$geno <- genotype#
#
	# generate boxplot:#
	pdf(paste(output.path,subfolder,"plot.eQTL.",assns$bacteria[i],".",assns$rs[i],".POSTER.",today,"ERD.pdf", sep=""))#
	PLOT <- boxplot(as.numeric(raw$pheno) ~ raw$geno, plot=FALSE)#
	if (length(PLOT$names) < 3) {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i],"\n chr",assns$chr[i]," p-value = ",signif(assns$p_lrt[i],2), sep=""), group.names=c(paste(PLOT$names[1],"\nn=",PLOT$n[1],sep=""), paste(PLOT$names[2],"\nn=",PLOT$n[2],sep="")))#
		boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35, add=TRUE, notch=TRUE, names=c(" ", " "), outline=FALSE)#
	} else {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i],"\n chr",assns$chr[i]," p-value = ",assns$p_lrt[i], sep=""), group.names=c(paste(PLOT$names[1],"\nn=",PLOT$n[1],sep=""), paste(PLOT$names[2],"\nn=",PLOT$n[2],sep=""), paste(PLOT$names[3],"\nn=",PLOT$n[3],sep="")))#
		boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35, add=TRUE, notch=TRUE, names=c(" ", " ", " "), outline=FALSE)#
	}#
	dev.off()#
}#
#
print("DONE!")
##### Create plot for each bacteria:#
for (i in 1:dim(assns)[1]) {#
	print(paste("generating plot for ",assns$bacteria[i]," (",i,")", sep=""))#
	# load in allele information for all individuals:#
	raw <- read.table(file=paste(input.path,"recode_",assns$rs[i],"_",assns$bacteria[i],"_051414ERD.txt.ped", sep=""), sep=" ", header=FALSE)#
	# list of alleles:#
	allele <- c(0, as.character(alleles[which(alleles$V2 == assns$rs[i]),5]), as.character(alleles[which(alleles$V2 == assns$rs[i]),6]))#
	# add phenotype to allele information:#
	raw$pheno <- phenos[,which(colnames(phenos) == assns$bacteria[i])]#
	# Look at only the individuals where we have a phenotype:#
	raw <- raw[-which(raw$pheno == -9),]#
	# Look at only the individuals where we have genotypes:#
	if (length(which(raw$V7 == 0)) > 0) {#
		raw <- raw[-which(raw$V7 == 0),]#
	}#
	# Code the genotypes:#
	genotype <- c()#
	for (j in 1:dim(raw)[1]) {#
		if (raw$V7[j] == allele[2] & raw$V8[j] == allele[2]) {#
			genotype <- c(genotype, paste(allele[2],allele[2], sep=""))#
		} else if (raw$V7[j] == allele[3] & raw$V8[j] == allele[3]) {#
			genotype <- c(genotype, paste(allele[3],allele[3], sep=""))#
		} else {#
			genotype <- c(genotype, paste(allele[2],allele[3], sep=""))#
		}#
	}#
#
	raw$geno <- genotype#
#
	# generate boxplot:#
	pdf(paste(output.path,subfolder,"plot.eQTL.",assns$bacteria[i],".",assns$rs[i],".POSTER.",today,"ERD.pdf", sep=""))#
	PLOT <- boxplot(as.numeric(raw$pheno) ~ raw$geno, plot=FALSE)#
	if (length(PLOT$names) < 3) {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i],"\n chr",assns$chr[i]," p-value = ",signif(assns$p_lrt[i],2), sep=""), group.names=c(paste(PLOT$names[1],"\nn=",PLOT$n[1],sep=""), paste(PLOT$names[2],"\nn=",PLOT$n[2],sep="")), cex.main=2, cex.axis=1.4, cex.lab=1.6)#
		boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35, add=TRUE, notch=TRUE, names=c(" ", " "), outline=FALSE)#
	} else {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i],"\n chr",assns$chr[i]," p-value = ",assns$p_lrt[i], sep=""), group.names=c(paste(PLOT$names[1],"\nn=",PLOT$n[1],sep=""), paste(PLOT$names[2],"\nn=",PLOT$n[2],sep=""), paste(PLOT$names[3],"\nn=",PLOT$n[3],sep="")))#
		boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35, add=TRUE, notch=TRUE, names=c(" ", " ", " "), outline=FALSE)#
	}#
	dev.off()#
}
##### Create plot for each bacteria:#
for (i in 1:dim(assns)[1]) {#
	print(paste("generating plot for ",assns$bacteria[i]," (",i,")", sep=""))#
	# load in allele information for all individuals:#
	raw <- read.table(file=paste(input.path,"recode_",assns$rs[i],"_",assns$bacteria[i],"_051414ERD.txt.ped", sep=""), sep=" ", header=FALSE)#
	# list of alleles:#
	allele <- c(0, as.character(alleles[which(alleles$V2 == assns$rs[i]),5]), as.character(alleles[which(alleles$V2 == assns$rs[i]),6]))#
	# add phenotype to allele information:#
	raw$pheno <- phenos[,which(colnames(phenos) == assns$bacteria[i])]#
	# Look at only the individuals where we have a phenotype:#
	raw <- raw[-which(raw$pheno == -9),]#
	# Look at only the individuals where we have genotypes:#
	if (length(which(raw$V7 == 0)) > 0) {#
		raw <- raw[-which(raw$V7 == 0),]#
	}#
	# Code the genotypes:#
	genotype <- c()#
	for (j in 1:dim(raw)[1]) {#
		if (raw$V7[j] == allele[2] & raw$V8[j] == allele[2]) {#
			genotype <- c(genotype, paste(allele[2],allele[2], sep=""))#
		} else if (raw$V7[j] == allele[3] & raw$V8[j] == allele[3]) {#
			genotype <- c(genotype, paste(allele[3],allele[3], sep=""))#
		} else {#
			genotype <- c(genotype, paste(allele[2],allele[3], sep=""))#
		}#
	}#
#
	raw$geno <- genotype#
#
	# generate boxplot:#
	pdf(paste(output.path,subfolder,"plot.eQTL.",assns$bacteria[i],".",assns$rs[i],".POSTER.",today,"ERD.pdf", sep=""))#
	PLOT <- boxplot(as.numeric(raw$pheno) ~ raw$geno, plot=FALSE)#
	if (length(PLOT$names) < 3) {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i],"\n chr",assns$chr[i]," p-value = ",signif(assns$p_lrt[i],2), sep=""), group.names=c(paste(PLOT$names[1]," n=",PLOT$n[1],sep=""), paste(PLOT$names[2]," n=",PLOT$n[2],sep="")), cex.main=2, cex.axis=1.4, cex.lab=1.6)#
		boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35, add=TRUE, notch=TRUE, names=c(" ", " "), outline=FALSE)#
	} else {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i],"\n chr",assns$chr[i]," p-value = ",assns$p_lrt[i], sep=""), group.names=c(paste(PLOT$names[1],"\nn=",PLOT$n[1],sep=""), paste(PLOT$names[2],"\nn=",PLOT$n[2],sep=""), paste(PLOT$names[3],"\nn=",PLOT$n[3],sep="")))#
		boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35, add=TRUE, notch=TRUE, names=c(" ", " ", " "), outline=FALSE)#
	}#
	dev.off()#
}
##### Create plot for each bacteria:#
for (i in 1:dim(assns)[1]) {#
	print(paste("generating plot for ",assns$bacteria[i]," (",i,")", sep=""))#
	# load in allele information for all individuals:#
	raw <- read.table(file=paste(input.path,"recode_",assns$rs[i],"_",assns$bacteria[i],"_051414ERD.txt.ped", sep=""), sep=" ", header=FALSE)#
	# list of alleles:#
	allele <- c(0, as.character(alleles[which(alleles$V2 == assns$rs[i]),5]), as.character(alleles[which(alleles$V2 == assns$rs[i]),6]))#
	# add phenotype to allele information:#
	raw$pheno <- phenos[,which(colnames(phenos) == assns$bacteria[i])]#
	# Look at only the individuals where we have a phenotype:#
	raw <- raw[-which(raw$pheno == -9),]#
	# Look at only the individuals where we have genotypes:#
	if (length(which(raw$V7 == 0)) > 0) {#
		raw <- raw[-which(raw$V7 == 0),]#
	}#
	# Code the genotypes:#
	genotype <- c()#
	for (j in 1:dim(raw)[1]) {#
		if (raw$V7[j] == allele[2] & raw$V8[j] == allele[2]) {#
			genotype <- c(genotype, paste(allele[2],allele[2], sep=""))#
		} else if (raw$V7[j] == allele[3] & raw$V8[j] == allele[3]) {#
			genotype <- c(genotype, paste(allele[3],allele[3], sep=""))#
		} else {#
			genotype <- c(genotype, paste(allele[2],allele[3], sep=""))#
		}#
	}#
#
	raw$geno <- genotype#
#
	# generate boxplot:#
	pdf(paste(output.path,subfolder,"plot.eQTL.",assns$bacteria[i],".",assns$rs[i],".POSTER.",today,"ERD.pdf", sep=""))#
	PLOT <- boxplot(as.numeric(raw$pheno) ~ raw$geno, plot=FALSE)#
	if (length(PLOT$names) < 3) {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i],"\n chr",assns$chr[i]," p-value = ",signif(assns$p_lrt[i],2), sep=""), group.names=c(paste(PLOT$names[1]," (n=",PLOT$n[1],")",sep=""), paste(PLOT$names[2]," (n=",PLOT$n[2], ")",sep="")), cex.main=2, cex.axis=1.4, cex.lab=1.6)#
		boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35, add=TRUE, notch=TRUE, names=c(" ", " "), outline=FALSE)#
	} else {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i],"\n chr",assns$chr[i]," p-value = ",assns$p_lrt[i], sep=""), group.names=c(paste(PLOT$names[1],"\nn=",PLOT$n[1],sep=""), paste(PLOT$names[2],"\nn=",PLOT$n[2],sep=""), paste(PLOT$names[3],"\nn=",PLOT$n[3],sep="")))#
		boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35, add=TRUE, notch=TRUE, names=c(" ", " ", " "), outline=FALSE)#
	}#
	dev.off()#
}
##### Create plot for each bacteria:#
for (i in 1:dim(assns)[1]) {#
	print(paste("generating plot for ",assns$bacteria[i]," (",i,")", sep=""))#
	# load in allele information for all individuals:#
	raw <- read.table(file=paste(input.path,"recode_",assns$rs[i],"_",assns$bacteria[i],"_051414ERD.txt.ped", sep=""), sep=" ", header=FALSE)#
	# list of alleles:#
	allele <- c(0, as.character(alleles[which(alleles$V2 == assns$rs[i]),5]), as.character(alleles[which(alleles$V2 == assns$rs[i]),6]))#
	# add phenotype to allele information:#
	raw$pheno <- phenos[,which(colnames(phenos) == assns$bacteria[i])]#
	# Look at only the individuals where we have a phenotype:#
	raw <- raw[-which(raw$pheno == -9),]#
	# Look at only the individuals where we have genotypes:#
	if (length(which(raw$V7 == 0)) > 0) {#
		raw <- raw[-which(raw$V7 == 0),]#
	}#
	# Code the genotypes:#
	genotype <- c()#
	for (j in 1:dim(raw)[1]) {#
		if (raw$V7[j] == allele[2] & raw$V8[j] == allele[2]) {#
			genotype <- c(genotype, paste(allele[2],allele[2], sep=""))#
		} else if (raw$V7[j] == allele[3] & raw$V8[j] == allele[3]) {#
			genotype <- c(genotype, paste(allele[3],allele[3], sep=""))#
		} else {#
			genotype <- c(genotype, paste(allele[2],allele[3], sep=""))#
		}#
	}#
#
	raw$geno <- genotype#
#
	# generate boxplot:#
	pdf(paste(output.path,subfolder,"plot.eQTL.",assns$bacteria[i],".",assns$rs[i],".POSTER.",today,"ERD.pdf", sep=""))#
	PLOT <- boxplot(as.numeric(raw$pheno) ~ raw$geno, plot=FALSE)#
	if (length(PLOT$names) < 3) {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i], sep=""), group.names=c(paste(PLOT$names[1]," (n=",PLOT$n[1],")",sep=""), paste(PLOT$names[2]," (n=",PLOT$n[2], ")",sep="")), cex.main=2, cex.axis=1.4, cex.lab=1.6)#
		boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35, add=TRUE, notch=TRUE, names=c(" ", " "), outline=FALSE)#
	} else {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i],"\n chr",assns$chr[i]," p-value = ",assns$p_lrt[i], sep=""), group.names=c(paste(PLOT$names[1],"\nn=",PLOT$n[1],sep=""), paste(PLOT$names[2],"\nn=",PLOT$n[2],sep=""), paste(PLOT$names[3],"\nn=",PLOT$n[3],sep="")))#
		boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35, add=TRUE, notch=TRUE, names=c(" ", " ", " "), outline=FALSE)#
	}#
	dev.off()#
}
pdf(paste(output.path,subfolder,"plot.eQTL.",assns$bacteria[i],".",assns$rs[i],".POSTER.",today,"ERD.pdf", sep=""))#
	PLOT <- boxplot(as.numeric(raw$pheno) ~ raw$geno, plot=FALSE)#
	if (length(PLOT$names) < 3) {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i], sep=""), group.names=c(paste(PLOT$names[1]," (n=",PLOT$n[1],")",sep=""), paste(PLOT$names[2]," (n=",PLOT$n[2], ")",sep="")), cex.main=2, cex.axis=1.4, cex.lab=1.6)#
		boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35,yaxt="n", add=TRUE, notch=TRUE, names=c(" ", " "), outline=FALSE)#
	} else {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i],"\n chr",assns$chr[i]," p-value = ",assns$p_lrt[i], sep=""), group.names=c(paste(PLOT$names[1],"\nn=",PLOT$n[1],sep=""), paste(PLOT$names[2],"\nn=",PLOT$n[2],sep=""), paste(PLOT$names[3],"\nn=",PLOT$n[3],sep="")))#
		boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35, add=TRUE, notch=TRUE, names=c(" ", " ", " "), outline=FALSE)#
	}
pdf(paste(output.path,subfolder,"plot.eQTL.",assns$bacteria[i],".",assns$rs[i],".POSTER.",today,"ERD.pdf", sep=""))#
	PLOT <- boxplot(as.numeric(raw$pheno) ~ raw$geno, plot=FALSE)#
	if (length(PLOT$names) < 3) {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i], sep=""), group.names=c(paste(PLOT$names[1]," (n=",PLOT$n[1],")",sep=""), paste(PLOT$names[2]," (n=",PLOT$n[2], ")",sep="")), cex.main=2, cex.axis=1.4, cex.lab=1.6)#
		#boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35, yaxt="n", add=TRUE, notch=TRUE, names=c(" ", " "), outline=FALSE)#
	} else {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i],"\n chr",assns$chr[i]," p-value = ",assns$p_lrt[i], sep=""), group.names=c(paste(PLOT$names[1],"\nn=",PLOT$n[1],sep=""), paste(PLOT$names[2],"\nn=",PLOT$n[2],sep=""), paste(PLOT$names[3],"\nn=",PLOT$n[3],sep="")))#
		boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35, add=TRUE, notch=TRUE, names=c(" ", " ", " "), outline=FALSE)#
	}#
	dev.off()
pdf(paste(output.path,subfolder,"plot.eQTL.",assns$bacteria[i],".",assns$rs[i],".POSTER.",today,"ERD.pdf", sep=""))#
	PLOT <- boxplot(as.numeric(raw$pheno) ~ raw$geno, plot=FALSE)#
	if (length(PLOT$names) < 3) {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i], sep=""), group.names=c(paste(PLOT$names[1]," (n=",PLOT$n[1],")",sep=""), paste(PLOT$names[2]," (n=",PLOT$n[2], ")",sep="")), cex.main=2, cex.axis=1.4, cex.lab=1.6)#
		boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35, axes=FALSE, add=TRUE, notch=TRUE, names=c(" ", " "), outline=FALSE)#
	} else {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i],"\n chr",assns$chr[i]," p-value = ",assns$p_lrt[i], sep=""), group.names=c(paste(PLOT$names[1],"\nn=",PLOT$n[1],sep=""), paste(PLOT$names[2],"\nn=",PLOT$n[2],sep=""), paste(PLOT$names[3],"\nn=",PLOT$n[3],sep="")))#
		boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35, add=TRUE, notch=TRUE, names=c(" ", " ", " "), outline=FALSE)#
	}#
	dev.off()
###### PARAMETERS ###########
# Set the parameters:#
today <- Sys.Date()											# Set the date that will go on the end of the files generated by this script#
today <- format(today, format="%m%d%y")#
input.path <- c("/Users/erdavenport/clusterhome/poopQTL/12_seasons_averaged/GEMMA_output_bacteria_051414/") 	# path to all trait association files#
cluster.out <- c("/Users/erdavenport/clusterhome/poopQTL/12_seasons_averaged/GEMMA_output_bacteria_qvals_051414/") # path to save the qvals to#
output.path <- c("/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/37_FC1to4_seasons_averaged/")	# path for all output to go into#
subfolder <- c("3_GEMMA_for_bacteria_051414/")					# Optional folder for putting initial data files into#
##############################
##### Load libraries:#
library(gap)#
library(qvalue)#
##### Generate list of all association files from the current folder:#
files <- list.files(path=input.path, pattern="assoc")#
#
files <- files[grep("Akk", files)]#
#
##### Loop through each file to identify if there are any significant hits:#
for (i in 1:length(files)) {#
	print(i)#
	bacteria <- gsub("GWAS.127.season.averaged.bacteria.", "", gsub(".column..*.out..*.assoc.txt", "", files[i]))#
	data <- read.table(paste(input.path,files[i], sep=""), sep="\t", header=TRUE, colClasses=c("numeric", "character", "numeric", "numeric", "character", "character", "numeric", "numeric", "numeric"))#
	# qvalues:#
	q_lrt <- qvalue(data$p_lrt)$qvalues#
	data <- cbind(data, q_lrt)#
	# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=5, height=2.5, unit="in", pointsize=4, res=600)#
		#pdf(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.pdf", sep=""), width=5, height=2.5)#
		#par(mfrow=c(1,2))#
		par(mai = c(.25,.5,.5,.2), cex = 1, cex.axis=.8, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=.5, col="plum4")#
		}#
		dev.off()#
	}
}
i
if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=5, height=2.5, unit="in", res=120)#
		#pdf(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.pdf", sep=""), width=5, height=2.5)#
		#par(mfrow=c(1,2))#
		par(mai = c(.25,.5,.5,.2), cex = 1, cex.axis=.8, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=.5, col="plum4")#
		}#
		dev.off()
}
if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=5, height=2.5, unit="in", res=300)#
		#pdf(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.pdf", sep=""), width=5, height=2.5)#
		#par(mfrow=c(1,2))#
		par(mai = c(.25,.5,.5,.2), cex = 1, cex.axis=.8, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=.5, col="plum4")#
		}#
		dev.off()#
	}
if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=5, height=2.5, unit="in", res=1200)#
		#pdf(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.pdf", sep=""), width=5, height=2.5)#
		#par(mfrow=c(1,2))#
		par(mai = c(.25,.5,.5,.2), cex = 1, cex.axis=.8, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=.5, col="plum4")#
		}#
		dev.off()#
	}
pdf(paste(output.path,subfolder,"QQplot.POSTER.",bacteria,".",today,"ERD.pdf", sep=""), width=4, height=4)#
#
		# qqplot:#
		o <- -log10(sort(assoc$p_lrt, decreasing=F))#
		e <- -log10(1:length(o)/length(o))#
		plot(e,o, main=paste("QQplot", sep=""), pch=16, col=rgb(0,0,0,alpha=0.5), cex.main=1.5, xlab="expected", ylab="observed", cex.axis=1.2, cex.lab=1.3)#
		abline(0,1, col="red")#
		dev.off()
pdf(paste(output.path,subfolder,"QQplot.POSTER.",bacteria,".",today,"ERD.pdf", sep=""), width=4, height=4)#
#
		# qqplot:#
		par(mai=c(.7,.7,.5,.5))#
#
		o <- -log10(sort(assoc$p_lrt, decreasing=F))#
		e <- -log10(1:length(o)/length(o))#
		plot(e,o, main=paste("QQplot", sep=""), pch=16, col=rgb(0,0,0,alpha=0.5), cex.main=1.5, xlab="expected", ylab="observed", cex.axis=1.2, cex.lab=1.3)#
		abline(0,1, col="red")#
		dev.off()
pdf(paste(output.path,subfolder,"QQplot.POSTER.",bacteria,".",today,"ERD.pdf", sep=""), width=4, height=4)#
#
		# qqplot:#
		par(mai=c(.7,.7,.5,.5))#
#
		o <- -log10(sort(assoc$p_lrt, decreasing=F))#
		e <- -log10(1:length(o)/length(o))#
		plot(e,o, main=paste("QQplot", sep=""), pch=16, col=rgb(0,0,0,alpha=0.5), cex.main=1.5, xlab=" ", ylab=" ", cex.axis=1.2, cex.lab=1.3)#
		abline(0,1, col="red")#
		mtext(side = 2, text = "observed", line = 2, cex=0.8)	# xlab="genotype", ylab="normalized abundance"#
		mtext(side = 1, text = "expected", line = 2, cex=0.8)	#
#
		dev.off()
./plot_Maurano_enrichment_plots_single_cell_type_single_panels_POSTER_053014ERD.R /Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/37_FC1to4_seasons_averaged/6_Maurano_enrichment_051514/Maurano_Duke_DHS_cells_with_tissue_info_032514ERD.txt /Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/37_FC1to4_seasons_averaged/6_Maurano_enrichment_051514/ 1_enrichments_051514/ 2_single_plots_051514/ genus_Akkermansia skin averaged
###### PARAMETERS ###########
# Set the parameters:#
today <- Sys.Date()											# Set the date that will go on the end of the files generated by this script#
today <- format(today, format="%m%d%y")#
file.path <- c("/Users/erdavenport/clusterhome/poopQTL/12_seasons_averaged/GEMMA_output_bacteria_051414/")#
out.path <- c("/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/37_FC1to4_seasons_averaged/3_GEMMA_for_bacteria_051414/")#
##############################
##### Read list of all bacteria log files:#
print("read in bacteria log files")#
files <- list.files(path=file.path, pattern=".log.")
##### Read in all PVEs and sd(PVE):#
print("read in PVEs")#
all.pves <- c()#
for (i in 1:length(files)) {#
	log <- read.table(file=paste(file.path, files[i], sep=""), sep="\t", comment.char="?", stringsAsFactors=FALSE)$V1#
	pve <- gsub("## pve estimate in the null model = ", "", log[grep("pve estimate", log)])#
	sdpve <- strsplit(log[grep("pve estimate", log)+1], split = " ")[[1]][8]#
	bacteria <- gsub("GWAS.127.season.averaged.bacteria.", "", gsub(".column.*.out.051414ERD.log.txt", "", files[i]))#
	all.pves <- rbind(all.pves, c(bacteria, pve, sdpve))#
}	#
#
sig <- c()#
##### Do any of the bacteria display chip heritability:#
print("checking if any are heritable")#
for (i in 1:dim(all.pves)[1]) {#
	if (all.pves[i,3] == "nan" ) {#
		sig <- c(sig, "x")#
	} else if (as.numeric(all.pves[i,2]) > as.numeric(all.pves[i,3])) {#
		sig <- c(sig, "heritable")#
	} else {#
		sig <- c(sig, "x")#
	}#
}#
#
tozero <- (as.numeric(all.pves[,2])-as.numeric(all.pves[,3]))#
tozero[is.na(tozero)] <- -1000#
#
ordered.sig <- all.pves[order(tozero, decreasing=TRUE),]#
ordered.sig[which(ordered.sig == "nan")] <- 0
head(ordered.sig)
ordered.sig[1:10]
ordered.sig[1:10,]
grep(Anaerostipes, orderd.sig[,1])
grep(Anaerostipes, ordered.sig[,1])
grep("Anaerostipes", ordered.sig[,1])
grep("Akkermansia", ordered.sig[,1])
grep("Anaerofilum", ordered.sig[,1])
grep("Mitsuokella", ordered.sig[,1])
grep("Megasphaera", ordered.sig[,1])
grep("Faecali", ordered.sig[,1])
79+47
79/126
47/126
68+24
?t.test
25+28+24
25+29+22
25+28+24
65+26
grades <- c(95, 92, 77, 95, 79, 80, 91, 85, 76, 77, 98, 85)
length(grades)
hist(grades)
mean(grades)
median(grades)
###### PARAMETERS ###########
# Set the parameters:#
today <- Sys.Date()							# Set the date that will go on the end of the files generated by this script#
today <- format(today, format="%m%d%y")#
output.path <- c("/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/39_FC1to4_seasons_individually/")	# path for all output to go into#
subfolder <- c("1_Initial_data_processing_052614/")		# Optional folder for putting initial data files into#
cor.cutoff = 0.9							# What Pearson correlation cutoff should be used?#
presence.cutoff = 0.75						# In what proportion of individuals should the bacteria be in?#
##############################
##### First, load in all levels of data across all individuals, both seasons:#
all.bacteria <- c()#
initial.bacteria <- c()#
print("Loading all initial bacteria proportion tables...")#
print("Number of taxa before any pruning:")#
for (a in c("phylum", "class", "order", "family", "genus")) {#
	data <- read.table(file=paste("/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/20_FC1to4_for_QTLs/FC1to4.subsampled.2mil.",a,".standardized.reps.combined.no.abs.052313ERD.txt", sep=""), sep="\t", header=TRUE)#
	print(c(a, dim(data)[1]))#
	initial.bacteria <- c(initial.bacteria, dim(data)[1])#
	all.bacteria <- rbind(all.bacteria, data)#
}#
print(c("all taxa", dim(all.bacteria)[1]))
dim(data)
data[1:5,1:5]
zeros <- apply(data, 2, function(x) {length(which(x == 0))/length(x)}
)
length(zeros)
hist(zeros)
zeros <- apply(data, 2, function(x) {length(which(x != 0))})
hist(zeros)
25+28
32/690
getwd()
sample_sheet <- read.table(file=paste(output.path, "EMILY HCS Sample Sheet.csv", sep=""), sep=",", header=TRUE)#
#
data <- read.table(file=paste(output.path, "Pinto_SampleID Barcodes_CRS TEVA MIST.txt", sep=""), sep="\t", header=TRUE)
###### PARAMETERS ###########
# Set the parameters:#
today <- Sys.Date()							# Set the date that will go on the end of the files generated by this script#
today <- format(today, format="%m%d%y")#
output.path <- c("../files_from_Gorka/")	# path for all output to go into#
##############################
sample_sheet <- read.table(file=paste(output.path, "EMILY HCS Sample Sheet.csv", sep=""), sep=",", header=TRUE)#
#
data <- read.table(file=paste(output.path, "Pinto_SampleID Barcodes_CRS TEVA MIST.txt", sep=""), sep="\t", header=TRUE)
head(data)
SampleID <- data$sampleID[which(data$pool == "JP1")]
length(SampleID)
head(SampleID)
SampleID <- as.character(data$sampleID[which(data$pool == "JP1")])#
BarcodeSequence <- as.character(data$index[which(data$pool == "JP1")])#
LinkerPrimerSequence <- rep("NA", length(SampleID))#
Description <- as.character(data$project[which(data$pool == "JP1")])#
#
mapping <- cbind(SampleID, BarcodeSequence, LinkerPrimerSequence, Description)
head(mapping)
dim(mapping)
table(SampleID)
colnames(mapping)[1] <- paste("#", colnames(mapping)[1], sep="")
head(mapping)
write.table(mapping, paste(output.path, "JP1_mapping_file_for_QIIME_",today,"ERD.txt", sep=""), sep="\t", row.names=FALSE, quote=FALSE)
SampleID <- as.character(data$sampleID[which(data$pool == "JP2")])#
BarcodeSequence <- as.character(data$index[which(data$pool == "JP2")])#
LinkerPrimerSequence <- rep("NA", length(SampleID))#
Description <- as.character(data$project[which(data$pool == "JP2")])#
#
mapping <- cbind(SampleID, BarcodeSequence, LinkerPrimerSequence, Description)#
colnames(mapping)[1] <- paste("#", colnames(mapping)[1], sep="")
dim(mapping)
head(mapping)
write.table(mapping, paste(output.path, "JP2_mapping_file_for_QIIME_",today,"ERD.txt", sep=""), sep="\t", row.names=FALSE, quote=FALSE)
