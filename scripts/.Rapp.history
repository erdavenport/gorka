?mhtplot
par(mai=c(1,1,1,1))#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19)#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.5)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}
if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=1600, height=800)#
		par(mfrow=c(1,2))#
#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19)#
		axis(2, pos=2, at=0:maxy)#
		title(paste(bacteria, cex.main=1.5)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=1600, height=800)#
		par(mfrow=c(1,2))#
#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19)#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.5)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
	}
today <- Sys.Date()											# Set the date that will go on the end of the files generated by this script#
today <- format(today, format="%m%d%y")#
input.path <- c("/Users/erdavenport/clusterhome/poopQTL/12_seasons_averaged/GEMMA_output_bacteria_051414/") 	# path to all trait association files#
cluster.out <- c("/Users/erdavenport/clusterhome/poopQTL/12_seasons_averaged/GEMMA_output_bacteria_qvals_051414/") # path to save the qvals to#
output.path <- c("/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/37_FC1to4_seasons_averaged/")	# path for all output to go into#
subfolder <- c("3_GEMMA_for_bacteria_051414/")					# Optional folder for putting initial data files into
if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=1600, height=800)#
		par(mfrow=c(1,2))#
#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19)#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.5)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
	}
dev.off()
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=800, height=800)#
		#par(mfrow=c(1,2))#
#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19)#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.5)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
?axis
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=800, height=800)#
		#par(mfrow=c(1,2))#
		par(cex.axis=1.6#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19)#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=800, height=800)#
		#par(mfrow=c(1,2))#
		par(cex.axis=1.6)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19)#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=800, height=800)#
		#par(mfrow=c(1,2))#
		par(cex.axis=1.6)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=3) # labels=NULL)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19)#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=800, height=800)#
		#par(mfrow=c(1,2))#
		par(cex.axis=1.6)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2, srt=0) # labels=NULL)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19)#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=800, height=800)#
		#par(mfrow=c(1,2))#
		par(cex.axis=1.6)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2, labels=NULL)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19)#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=800, height=800)#
		#par(mfrow=c(1,2))#
		par(cex.axis=1.6)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2, labels=NULL)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab="-log10(p)")#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=800, height=800)#
		#par(mfrow=c(1,2))#
		par(cex.axis=1.6)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2, labels=NULL)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab="-log10(p)", cex.axis=1.8)#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=800, height=800)#
		#par(mfrow=c(1,2))#
		par(cex.axis=1.5, cex.lab=1.8)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2, labels=NULL)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab="-log10(p)")#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=800, height=800)#
		#par(mfrow=c(1,2))#
		par(cex.axis=1.5, cex.lab=1.8)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2, labels=NULL)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab="-log10(p)", cex.lab=1.8)#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
?par
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=800, height=800)#
		#par(mfrow=c(1,2))#
		par(cex = 1, cex.axis=1.5, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2, labels=NULL)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab="-log10(p)")#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
mht.control
?mht.control
?mhtplot
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=800, height=800)#
		#par(mfrow=c(1,2))#
		par(cex = 1, cex.axis=1.5, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=2, labels=NULL)#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ")#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=800, height=800)#
		#par(mfrow=c(1,2))#
		par(cex = 1, cex.axis=1.5, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=1, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ")#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=800, height=800)#
		#par(mfrow=c(1,2))#
		par(cex = 1, cex.axis=1.5, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ")#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=800, height=500)#
		#par(mfrow=c(1,2))#
		par(cex = 1, cex.axis=1.5, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ")#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=600, height=300)#
		#par(mfrow=c(1,2))#
		par(mai = c(.5,1,1,.4), cex = 1, cex.axis=1.5, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ")#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
max(-log10(assoc$p_lrt)
)
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=600, height=300)#
		#par(mfrow=c(1,2))#
		par(mai = c(.5,1,1,.4), cex = 1, cex.axis=1.5, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
?png
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=600, height=300, res=600)#
		#par(mfrow=c(1,2))#
		par(mai = c(.5,1,1,.4), cex = 1, cex.axis=1.5, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=6, height=3, res=600)#
		#par(mfrow=c(1,2))#
		par(mai = c(.5,1,1,.4), cex = 1, cex.axis=1.5, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=6, height=3, units="in", res=1200)#
		#par(mfrow=c(1,2))#
		par(mai = c(.5,1,1,.4), cex = 1, cex.axis=1.5, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=5, height=2.5, units="in", res=1200)#
		#par(mfrow=c(1,2))#
		par(mai = c(.25,.5,.5,.2), cex = 1, cex.axis=1.2, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.5)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=1, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=1, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=5, height=2.5, units="in", res=1200)#
		#par(mfrow=c(1,2))#
		par(mai = c(.25,.5,.5,.2), cex = 1, cex.axis=1.2, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=.7, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=.7, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=.7, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=5, height=2.5, units="in", res=1200)#
		#par(mfrow=c(1,2))#
		par(mai = c(.25,.5,.5,.2), cex = 1, cex.axis=.9, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=.5, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=5, height=2.5, units="in", res=1200)#
		#par(mfrow=c(1,2))#
		par(mai = c(.25,.5,.5,.2), cex = 1, cex.axis=.4, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=.5, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=5, height=2.5, units="in", res=1200)#
		#par(mfrow=c(1,2))#
		par(mai = c(.25,.5,.5,.2), cex = 1, cex.axis=.8, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=.5, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=5, height=2.5, units="in", res=600)#
		#par(mfrow=c(1,2))#
		par(mai = c(.25,.5,.5,.2), cex = 1, cex.axis=.8, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=.5, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=5*72, height=2.5*72, res=72)#
		#par(mfrow=c(1,2))#
		par(mai = c(.25,.5,.5,.2), cex = 1, cex.axis=.8, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=.5, col="plum4")#
		}#
		dev.off()#
	}
if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=5, height=2.5, unit="in", pointsize=4, res=1200)#
		#par(mfrow=c(1,2))#
		par(mai = c(.25,.5,.5,.2), cex = 1, cex.axis=.8, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=.5, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=5, height=2.5, unit="in", pointsize=4, res=600)#
		#par(mfrow=c(1,2))#
		par(mai = c(.25,.5,.5,.2), cex = 1, cex.axis=.8, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=.5, col="plum4")#
		}#
		dev.off()#
	}
# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		#png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=5, height=2.5, unit="in", pointsize=4, res=600)#
		pdf(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.pdf", sep=""), width=5, height=2.5)#
		#par(mfrow=c(1,2))#
		par(mai = c(.25,.5,.5,.2), cex = 1, cex.axis=.8, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=.5, col="plum4")#
		}#
		dev.off()#
	}
###### PARAMETERS ###########
# Set the parameters:#
today <- Sys.Date()											# Set the date that will go on the end of the files generated by this script#
today <- format(today, format="%m%d%y")#
input.path <- c("/Users/erdavenport/clusterhome/poopQTL/12_seasons_averaged/GEMMA_output_bacteria_051414/eQTL_plot_files_051414/") 	# path to all trait association files#
output.path <- c("/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/37_FC1to4_seasons_averaged/")	# path for all output to go into#
subfolder <- c("3_GEMMA_for_bacteria_051414/")					# Optional folder for putting initial data files into#
##############################
##### Load table of bacteria, snps, and pvalues:#
assns <- read.table(file=paste(output.path,subfolder,"all_sig_SNPs_from_bacteria_GWAS_051414ERD.txt", sep=""), sep="\t", header=TRUE)#
phenos <- read.table(file=paste(output.path,subfolder,"hutt.3chip.hg19remap.127.seasons.averaged.with.labs.051414ERD.fam", sep=""), sep=" ", header=TRUE)#
alleles <- read.table(file=paste(input.path,"major_minor_alleles_for_eQTL_plots_051414ERD.txt", sep=""), sep="\t", header=FALSE)
length(assns)
head(assns)
assns <- assns[5,]
assns
?round
##### Create plot for each bacteria:#
for (i in 1:dim(assns)[1]) {#
	print(paste("generating plot for ",assns$bacteria[i]," (",i,")", sep=""))#
	# load in allele information for all individuals:#
	raw <- read.table(file=paste(input.path,"recode_",assns$rs[i],"_",assns$bacteria[i],"_051414ERD.txt.ped", sep=""), sep=" ", header=FALSE)#
	# list of alleles:#
	allele <- c(0, as.character(alleles[which(alleles$V2 == assns$rs[i]),5]), as.character(alleles[which(alleles$V2 == assns$rs[i]),6]))#
	# add phenotype to allele information:#
	raw$pheno <- phenos[,which(colnames(phenos) == assns$bacteria[i])]#
	# Look at only the individuals where we have a phenotype:#
	raw <- raw[-which(raw$pheno == -9),]#
	# Look at only the individuals where we have genotypes:#
	if (length(which(raw$V7 == 0)) > 0) {#
		raw <- raw[-which(raw$V7 == 0),]#
	}#
	# Code the genotypes:#
	genotype <- c()#
	for (j in 1:dim(raw)[1]) {#
		if (raw$V7[j] == allele[2] & raw$V8[j] == allele[2]) {#
			genotype <- c(genotype, paste(allele[2],allele[2], sep=""))#
		} else if (raw$V7[j] == allele[3] & raw$V8[j] == allele[3]) {#
			genotype <- c(genotype, paste(allele[3],allele[3], sep=""))#
		} else {#
			genotype <- c(genotype, paste(allele[2],allele[3], sep=""))#
		}#
	}#
#
	raw$geno <- genotype#
#
	# generate boxplot:#
	pdf(paste(output.path,subfolder,"plot.eQTL.",assns$bacteria[i],".",assns$rs[i],".POSTER.",today,"ERD.pdf", sep=""))#
	PLOT <- boxplot(as.numeric(raw$pheno) ~ raw$geno, plot=FALSE)#
	if (length(PLOT$names) < 3) {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i],"\n chr",assns$chr[i]," p-value = ",signif(assns$p_lrt[i],2), sep=""), group.names=c(paste(PLOT$names[1],"\nn=",PLOT$n[1],sep=""), paste(PLOT$names[2],"\nn=",PLOT$n[2],sep="")))#
		boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35, add=TRUE, notch=TRUE, names=c(" ", " "), outline=FALSE)#
	} else {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i],"\n chr",assns$chr[i]," p-value = ",assns$p_lrt[i], sep=""), group.names=c(paste(PLOT$names[1],"\nn=",PLOT$n[1],sep=""), paste(PLOT$names[2],"\nn=",PLOT$n[2],sep=""), paste(PLOT$names[3],"\nn=",PLOT$n[3],sep="")))#
		boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35, add=TRUE, notch=TRUE, names=c(" ", " ", " "), outline=FALSE)#
	}#
	dev.off()#
}#
#
print("DONE!")
##### Create plot for each bacteria:#
for (i in 1:dim(assns)[1]) {#
	print(paste("generating plot for ",assns$bacteria[i]," (",i,")", sep=""))#
	# load in allele information for all individuals:#
	raw <- read.table(file=paste(input.path,"recode_",assns$rs[i],"_",assns$bacteria[i],"_051414ERD.txt.ped", sep=""), sep=" ", header=FALSE)#
	# list of alleles:#
	allele <- c(0, as.character(alleles[which(alleles$V2 == assns$rs[i]),5]), as.character(alleles[which(alleles$V2 == assns$rs[i]),6]))#
	# add phenotype to allele information:#
	raw$pheno <- phenos[,which(colnames(phenos) == assns$bacteria[i])]#
	# Look at only the individuals where we have a phenotype:#
	raw <- raw[-which(raw$pheno == -9),]#
	# Look at only the individuals where we have genotypes:#
	if (length(which(raw$V7 == 0)) > 0) {#
		raw <- raw[-which(raw$V7 == 0),]#
	}#
	# Code the genotypes:#
	genotype <- c()#
	for (j in 1:dim(raw)[1]) {#
		if (raw$V7[j] == allele[2] & raw$V8[j] == allele[2]) {#
			genotype <- c(genotype, paste(allele[2],allele[2], sep=""))#
		} else if (raw$V7[j] == allele[3] & raw$V8[j] == allele[3]) {#
			genotype <- c(genotype, paste(allele[3],allele[3], sep=""))#
		} else {#
			genotype <- c(genotype, paste(allele[2],allele[3], sep=""))#
		}#
	}#
#
	raw$geno <- genotype#
#
	# generate boxplot:#
	pdf(paste(output.path,subfolder,"plot.eQTL.",assns$bacteria[i],".",assns$rs[i],".POSTER.",today,"ERD.pdf", sep=""))#
	PLOT <- boxplot(as.numeric(raw$pheno) ~ raw$geno, plot=FALSE)#
	if (length(PLOT$names) < 3) {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i],"\n chr",assns$chr[i]," p-value = ",signif(assns$p_lrt[i],2), sep=""), group.names=c(paste(PLOT$names[1],"\nn=",PLOT$n[1],sep=""), paste(PLOT$names[2],"\nn=",PLOT$n[2],sep="")), cex.main=2, cex.axis=1.4, cex.lab=1.6)#
		boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35, add=TRUE, notch=TRUE, names=c(" ", " "), outline=FALSE)#
	} else {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i],"\n chr",assns$chr[i]," p-value = ",assns$p_lrt[i], sep=""), group.names=c(paste(PLOT$names[1],"\nn=",PLOT$n[1],sep=""), paste(PLOT$names[2],"\nn=",PLOT$n[2],sep=""), paste(PLOT$names[3],"\nn=",PLOT$n[3],sep="")))#
		boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35, add=TRUE, notch=TRUE, names=c(" ", " ", " "), outline=FALSE)#
	}#
	dev.off()#
}
##### Create plot for each bacteria:#
for (i in 1:dim(assns)[1]) {#
	print(paste("generating plot for ",assns$bacteria[i]," (",i,")", sep=""))#
	# load in allele information for all individuals:#
	raw <- read.table(file=paste(input.path,"recode_",assns$rs[i],"_",assns$bacteria[i],"_051414ERD.txt.ped", sep=""), sep=" ", header=FALSE)#
	# list of alleles:#
	allele <- c(0, as.character(alleles[which(alleles$V2 == assns$rs[i]),5]), as.character(alleles[which(alleles$V2 == assns$rs[i]),6]))#
	# add phenotype to allele information:#
	raw$pheno <- phenos[,which(colnames(phenos) == assns$bacteria[i])]#
	# Look at only the individuals where we have a phenotype:#
	raw <- raw[-which(raw$pheno == -9),]#
	# Look at only the individuals where we have genotypes:#
	if (length(which(raw$V7 == 0)) > 0) {#
		raw <- raw[-which(raw$V7 == 0),]#
	}#
	# Code the genotypes:#
	genotype <- c()#
	for (j in 1:dim(raw)[1]) {#
		if (raw$V7[j] == allele[2] & raw$V8[j] == allele[2]) {#
			genotype <- c(genotype, paste(allele[2],allele[2], sep=""))#
		} else if (raw$V7[j] == allele[3] & raw$V8[j] == allele[3]) {#
			genotype <- c(genotype, paste(allele[3],allele[3], sep=""))#
		} else {#
			genotype <- c(genotype, paste(allele[2],allele[3], sep=""))#
		}#
	}#
#
	raw$geno <- genotype#
#
	# generate boxplot:#
	pdf(paste(output.path,subfolder,"plot.eQTL.",assns$bacteria[i],".",assns$rs[i],".POSTER.",today,"ERD.pdf", sep=""))#
	PLOT <- boxplot(as.numeric(raw$pheno) ~ raw$geno, plot=FALSE)#
	if (length(PLOT$names) < 3) {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i],"\n chr",assns$chr[i]," p-value = ",signif(assns$p_lrt[i],2), sep=""), group.names=c(paste(PLOT$names[1]," n=",PLOT$n[1],sep=""), paste(PLOT$names[2]," n=",PLOT$n[2],sep="")), cex.main=2, cex.axis=1.4, cex.lab=1.6)#
		boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35, add=TRUE, notch=TRUE, names=c(" ", " "), outline=FALSE)#
	} else {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i],"\n chr",assns$chr[i]," p-value = ",assns$p_lrt[i], sep=""), group.names=c(paste(PLOT$names[1],"\nn=",PLOT$n[1],sep=""), paste(PLOT$names[2],"\nn=",PLOT$n[2],sep=""), paste(PLOT$names[3],"\nn=",PLOT$n[3],sep="")))#
		boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35, add=TRUE, notch=TRUE, names=c(" ", " ", " "), outline=FALSE)#
	}#
	dev.off()#
}
##### Create plot for each bacteria:#
for (i in 1:dim(assns)[1]) {#
	print(paste("generating plot for ",assns$bacteria[i]," (",i,")", sep=""))#
	# load in allele information for all individuals:#
	raw <- read.table(file=paste(input.path,"recode_",assns$rs[i],"_",assns$bacteria[i],"_051414ERD.txt.ped", sep=""), sep=" ", header=FALSE)#
	# list of alleles:#
	allele <- c(0, as.character(alleles[which(alleles$V2 == assns$rs[i]),5]), as.character(alleles[which(alleles$V2 == assns$rs[i]),6]))#
	# add phenotype to allele information:#
	raw$pheno <- phenos[,which(colnames(phenos) == assns$bacteria[i])]#
	# Look at only the individuals where we have a phenotype:#
	raw <- raw[-which(raw$pheno == -9),]#
	# Look at only the individuals where we have genotypes:#
	if (length(which(raw$V7 == 0)) > 0) {#
		raw <- raw[-which(raw$V7 == 0),]#
	}#
	# Code the genotypes:#
	genotype <- c()#
	for (j in 1:dim(raw)[1]) {#
		if (raw$V7[j] == allele[2] & raw$V8[j] == allele[2]) {#
			genotype <- c(genotype, paste(allele[2],allele[2], sep=""))#
		} else if (raw$V7[j] == allele[3] & raw$V8[j] == allele[3]) {#
			genotype <- c(genotype, paste(allele[3],allele[3], sep=""))#
		} else {#
			genotype <- c(genotype, paste(allele[2],allele[3], sep=""))#
		}#
	}#
#
	raw$geno <- genotype#
#
	# generate boxplot:#
	pdf(paste(output.path,subfolder,"plot.eQTL.",assns$bacteria[i],".",assns$rs[i],".POSTER.",today,"ERD.pdf", sep=""))#
	PLOT <- boxplot(as.numeric(raw$pheno) ~ raw$geno, plot=FALSE)#
	if (length(PLOT$names) < 3) {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i],"\n chr",assns$chr[i]," p-value = ",signif(assns$p_lrt[i],2), sep=""), group.names=c(paste(PLOT$names[1]," (n=",PLOT$n[1],")",sep=""), paste(PLOT$names[2]," (n=",PLOT$n[2], ")",sep="")), cex.main=2, cex.axis=1.4, cex.lab=1.6)#
		boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35, add=TRUE, notch=TRUE, names=c(" ", " "), outline=FALSE)#
	} else {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i],"\n chr",assns$chr[i]," p-value = ",assns$p_lrt[i], sep=""), group.names=c(paste(PLOT$names[1],"\nn=",PLOT$n[1],sep=""), paste(PLOT$names[2],"\nn=",PLOT$n[2],sep=""), paste(PLOT$names[3],"\nn=",PLOT$n[3],sep="")))#
		boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35, add=TRUE, notch=TRUE, names=c(" ", " ", " "), outline=FALSE)#
	}#
	dev.off()#
}
##### Create plot for each bacteria:#
for (i in 1:dim(assns)[1]) {#
	print(paste("generating plot for ",assns$bacteria[i]," (",i,")", sep=""))#
	# load in allele information for all individuals:#
	raw <- read.table(file=paste(input.path,"recode_",assns$rs[i],"_",assns$bacteria[i],"_051414ERD.txt.ped", sep=""), sep=" ", header=FALSE)#
	# list of alleles:#
	allele <- c(0, as.character(alleles[which(alleles$V2 == assns$rs[i]),5]), as.character(alleles[which(alleles$V2 == assns$rs[i]),6]))#
	# add phenotype to allele information:#
	raw$pheno <- phenos[,which(colnames(phenos) == assns$bacteria[i])]#
	# Look at only the individuals where we have a phenotype:#
	raw <- raw[-which(raw$pheno == -9),]#
	# Look at only the individuals where we have genotypes:#
	if (length(which(raw$V7 == 0)) > 0) {#
		raw <- raw[-which(raw$V7 == 0),]#
	}#
	# Code the genotypes:#
	genotype <- c()#
	for (j in 1:dim(raw)[1]) {#
		if (raw$V7[j] == allele[2] & raw$V8[j] == allele[2]) {#
			genotype <- c(genotype, paste(allele[2],allele[2], sep=""))#
		} else if (raw$V7[j] == allele[3] & raw$V8[j] == allele[3]) {#
			genotype <- c(genotype, paste(allele[3],allele[3], sep=""))#
		} else {#
			genotype <- c(genotype, paste(allele[2],allele[3], sep=""))#
		}#
	}#
#
	raw$geno <- genotype#
#
	# generate boxplot:#
	pdf(paste(output.path,subfolder,"plot.eQTL.",assns$bacteria[i],".",assns$rs[i],".POSTER.",today,"ERD.pdf", sep=""))#
	PLOT <- boxplot(as.numeric(raw$pheno) ~ raw$geno, plot=FALSE)#
	if (length(PLOT$names) < 3) {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i], sep=""), group.names=c(paste(PLOT$names[1]," (n=",PLOT$n[1],")",sep=""), paste(PLOT$names[2]," (n=",PLOT$n[2], ")",sep="")), cex.main=2, cex.axis=1.4, cex.lab=1.6)#
		boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35, add=TRUE, notch=TRUE, names=c(" ", " "), outline=FALSE)#
	} else {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i],"\n chr",assns$chr[i]," p-value = ",assns$p_lrt[i], sep=""), group.names=c(paste(PLOT$names[1],"\nn=",PLOT$n[1],sep=""), paste(PLOT$names[2],"\nn=",PLOT$n[2],sep=""), paste(PLOT$names[3],"\nn=",PLOT$n[3],sep="")))#
		boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35, add=TRUE, notch=TRUE, names=c(" ", " ", " "), outline=FALSE)#
	}#
	dev.off()#
}
pdf(paste(output.path,subfolder,"plot.eQTL.",assns$bacteria[i],".",assns$rs[i],".POSTER.",today,"ERD.pdf", sep=""))#
	PLOT <- boxplot(as.numeric(raw$pheno) ~ raw$geno, plot=FALSE)#
	if (length(PLOT$names) < 3) {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i], sep=""), group.names=c(paste(PLOT$names[1]," (n=",PLOT$n[1],")",sep=""), paste(PLOT$names[2]," (n=",PLOT$n[2], ")",sep="")), cex.main=2, cex.axis=1.4, cex.lab=1.6)#
		boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35,yaxt="n", add=TRUE, notch=TRUE, names=c(" ", " "), outline=FALSE)#
	} else {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i],"\n chr",assns$chr[i]," p-value = ",assns$p_lrt[i], sep=""), group.names=c(paste(PLOT$names[1],"\nn=",PLOT$n[1],sep=""), paste(PLOT$names[2],"\nn=",PLOT$n[2],sep=""), paste(PLOT$names[3],"\nn=",PLOT$n[3],sep="")))#
		boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35, add=TRUE, notch=TRUE, names=c(" ", " ", " "), outline=FALSE)#
	}
pdf(paste(output.path,subfolder,"plot.eQTL.",assns$bacteria[i],".",assns$rs[i],".POSTER.",today,"ERD.pdf", sep=""))#
	PLOT <- boxplot(as.numeric(raw$pheno) ~ raw$geno, plot=FALSE)#
	if (length(PLOT$names) < 3) {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i], sep=""), group.names=c(paste(PLOT$names[1]," (n=",PLOT$n[1],")",sep=""), paste(PLOT$names[2]," (n=",PLOT$n[2], ")",sep="")), cex.main=2, cex.axis=1.4, cex.lab=1.6)#
		#boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35, yaxt="n", add=TRUE, notch=TRUE, names=c(" ", " "), outline=FALSE)#
	} else {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i],"\n chr",assns$chr[i]," p-value = ",assns$p_lrt[i], sep=""), group.names=c(paste(PLOT$names[1],"\nn=",PLOT$n[1],sep=""), paste(PLOT$names[2],"\nn=",PLOT$n[2],sep=""), paste(PLOT$names[3],"\nn=",PLOT$n[3],sep="")))#
		boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35, add=TRUE, notch=TRUE, names=c(" ", " ", " "), outline=FALSE)#
	}#
	dev.off()
pdf(paste(output.path,subfolder,"plot.eQTL.",assns$bacteria[i],".",assns$rs[i],".POSTER.",today,"ERD.pdf", sep=""))#
	PLOT <- boxplot(as.numeric(raw$pheno) ~ raw$geno, plot=FALSE)#
	if (length(PLOT$names) < 3) {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i], sep=""), group.names=c(paste(PLOT$names[1]," (n=",PLOT$n[1],")",sep=""), paste(PLOT$names[2]," (n=",PLOT$n[2], ")",sep="")), cex.main=2, cex.axis=1.4, cex.lab=1.6)#
		boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35, axes=FALSE, add=TRUE, notch=TRUE, names=c(" ", " "), outline=FALSE)#
	} else {#
		stripchart(as.numeric(raw$pheno) ~ raw$geno, col="plum4", method="jitter", vertical=TRUE, pch=16, xlab="genotype", ylab="normalized abundance", main=paste(assns$bacteria[i], " by ",assns$rs[i],"\n chr",assns$chr[i]," p-value = ",assns$p_lrt[i], sep=""), group.names=c(paste(PLOT$names[1],"\nn=",PLOT$n[1],sep=""), paste(PLOT$names[2],"\nn=",PLOT$n[2],sep=""), paste(PLOT$names[3],"\nn=",PLOT$n[3],sep="")))#
		boxplot(as.numeric(raw$pheno) ~ raw$geno, range=1.5, boxwex=.35, add=TRUE, notch=TRUE, names=c(" ", " ", " "), outline=FALSE)#
	}#
	dev.off()
###### PARAMETERS ###########
# Set the parameters:#
today <- Sys.Date()											# Set the date that will go on the end of the files generated by this script#
today <- format(today, format="%m%d%y")#
input.path <- c("/Users/erdavenport/clusterhome/poopQTL/12_seasons_averaged/GEMMA_output_bacteria_051414/") 	# path to all trait association files#
cluster.out <- c("/Users/erdavenport/clusterhome/poopQTL/12_seasons_averaged/GEMMA_output_bacteria_qvals_051414/") # path to save the qvals to#
output.path <- c("/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/37_FC1to4_seasons_averaged/")	# path for all output to go into#
subfolder <- c("3_GEMMA_for_bacteria_051414/")					# Optional folder for putting initial data files into#
##############################
##### Load libraries:#
library(gap)#
library(qvalue)#
##### Generate list of all association files from the current folder:#
files <- list.files(path=input.path, pattern="assoc")#
#
files <- files[grep("Akk", files)]#
#
##### Loop through each file to identify if there are any significant hits:#
for (i in 1:length(files)) {#
	print(i)#
	bacteria <- gsub("GWAS.127.season.averaged.bacteria.", "", gsub(".column..*.out..*.assoc.txt", "", files[i]))#
	data <- read.table(paste(input.path,files[i], sep=""), sep="\t", header=TRUE, colClasses=c("numeric", "character", "numeric", "numeric", "character", "character", "numeric", "numeric", "numeric"))#
	# qvalues:#
	q_lrt <- qvalue(data$p_lrt)$qvalues#
	data <- cbind(data, q_lrt)#
	# plot stuff:#
	if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=5, height=2.5, unit="in", pointsize=4, res=600)#
		#pdf(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.pdf", sep=""), width=5, height=2.5)#
		#par(mfrow=c(1,2))#
		par(mai = c(.25,.5,.5,.2), cex = 1, cex.axis=.8, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=.5, col="plum4")#
		}#
		dev.off()#
	}
}
i
if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=5, height=2.5, unit="in", res=120)#
		#pdf(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.pdf", sep=""), width=5, height=2.5)#
		#par(mfrow=c(1,2))#
		par(mai = c(.25,.5,.5,.2), cex = 1, cex.axis=.8, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=.5, col="plum4")#
		}#
		dev.off()
}
if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=5, height=2.5, unit="in", res=300)#
		#pdf(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.pdf", sep=""), width=5, height=2.5)#
		#par(mfrow=c(1,2))#
		par(mai = c(.25,.5,.5,.2), cex = 1, cex.axis=.8, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=.5, col="plum4")#
		}#
		dev.off()#
	}
if (length(which(q_lrt <= 0.2)) > 0) {#
		bon <- -log10(0.05/dim(data)[1])#
		if (length(which(q_lrt <= 0.1)) > 0) {#
			q10 <- -log10(max(data$p_lrt[which(q_lrt <= 0.1)]))#
		} else {#
			q10 <- NULL#
		}#
		q20 <- -log10(max(data$p_lrt[which(q_lrt <= 0.2)]))#
		png(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.png", sep=""), width=5, height=2.5, unit="in", res=1200)#
		#pdf(paste(output.path,subfolder,"mhtplot.QQplot.POSTER.",bacteria,".",today,"ERD.pdf", sep=""), width=5, height=2.5)#
		#par(mfrow=c(1,2))#
		par(mai = c(.25,.5,.5,.2), cex = 1, cex.axis=.8, cex.lab=1)#
		assoc <- data[,c(1,3,dim(data)[2]-1)]#
		color <- rep(c("gray", "darkgray"), 11)#
		ops <- mht.control(colors=color, yline=1,xline=0, labels=" ")#
		maxy <- ceiling(max(-log10(assoc$p_lrt)))#
		mhtplot(assoc,ops,pch=19, ylab=" ", xlab=" ", ylim=c(0,maxy))#
		axis(2, pos=2, at=0:maxy)#
		title(bacteria, cex.main=1.2)#
		abline(h=-log10(0.05/dim(assoc)[1]), col="gray")#
		if (length(q10) > 0) {#
			if (q10 < bon) {#
				abline(h=q10, lty=2, col="gray")#
			}#
		} #
		if (q20 < bon) {#
			abline(h=q20, lty=3, col="gray")#
		}#
		# highlight any points above cutoffs:#
		if (length(which(-log10(data$p_lrt) >= q10) > 0)) {#
			myq10 <- which(-log10(data$p_lrt) >= q10)#
			points(myq10, -log10(data$p_lrt[myq10]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= q20) > 0)) {#
			myq20 <- which(-log10(data$p_lrt) >= q20)#
			points(myq20, -log10(data$p_lrt[myq20]), pch=19, cex=.5, col="plum4")#
		}#
		if (length(which(-log10(data$p_lrt) >= bon) > 0)) {#
			mybon <- which(-log10(data$p_lrt) >= bon)#
			points(mybon, -log10(data$p_lrt[mybon]), pch=19, cex=.5, col="plum4")#
		}#
		dev.off()#
	}
pdf(paste(output.path,subfolder,"QQplot.POSTER.",bacteria,".",today,"ERD.pdf", sep=""), width=4, height=4)#
#
		# qqplot:#
		o <- -log10(sort(assoc$p_lrt, decreasing=F))#
		e <- -log10(1:length(o)/length(o))#
		plot(e,o, main=paste("QQplot", sep=""), pch=16, col=rgb(0,0,0,alpha=0.5), cex.main=1.5, xlab="expected", ylab="observed", cex.axis=1.2, cex.lab=1.3)#
		abline(0,1, col="red")#
		dev.off()
pdf(paste(output.path,subfolder,"QQplot.POSTER.",bacteria,".",today,"ERD.pdf", sep=""), width=4, height=4)#
#
		# qqplot:#
		par(mai=c(.7,.7,.5,.5))#
#
		o <- -log10(sort(assoc$p_lrt, decreasing=F))#
		e <- -log10(1:length(o)/length(o))#
		plot(e,o, main=paste("QQplot", sep=""), pch=16, col=rgb(0,0,0,alpha=0.5), cex.main=1.5, xlab="expected", ylab="observed", cex.axis=1.2, cex.lab=1.3)#
		abline(0,1, col="red")#
		dev.off()
pdf(paste(output.path,subfolder,"QQplot.POSTER.",bacteria,".",today,"ERD.pdf", sep=""), width=4, height=4)#
#
		# qqplot:#
		par(mai=c(.7,.7,.5,.5))#
#
		o <- -log10(sort(assoc$p_lrt, decreasing=F))#
		e <- -log10(1:length(o)/length(o))#
		plot(e,o, main=paste("QQplot", sep=""), pch=16, col=rgb(0,0,0,alpha=0.5), cex.main=1.5, xlab=" ", ylab=" ", cex.axis=1.2, cex.lab=1.3)#
		abline(0,1, col="red")#
		mtext(side = 2, text = "observed", line = 2, cex=0.8)	# xlab="genotype", ylab="normalized abundance"#
		mtext(side = 1, text = "expected", line = 2, cex=0.8)	#
#
		dev.off()
./plot_Maurano_enrichment_plots_single_cell_type_single_panels_POSTER_053014ERD.R /Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/37_FC1to4_seasons_averaged/6_Maurano_enrichment_051514/Maurano_Duke_DHS_cells_with_tissue_info_032514ERD.txt /Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/37_FC1to4_seasons_averaged/6_Maurano_enrichment_051514/ 1_enrichments_051514/ 2_single_plots_051514/ genus_Akkermansia skin averaged
###### PARAMETERS ###########
# Set the parameters:#
today <- Sys.Date()											# Set the date that will go on the end of the files generated by this script#
today <- format(today, format="%m%d%y")#
file.path <- c("/Users/erdavenport/clusterhome/poopQTL/12_seasons_averaged/GEMMA_output_bacteria_051414/")#
out.path <- c("/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/37_FC1to4_seasons_averaged/3_GEMMA_for_bacteria_051414/")#
##############################
##### Read list of all bacteria log files:#
print("read in bacteria log files")#
files <- list.files(path=file.path, pattern=".log.")
##### Read in all PVEs and sd(PVE):#
print("read in PVEs")#
all.pves <- c()#
for (i in 1:length(files)) {#
	log <- read.table(file=paste(file.path, files[i], sep=""), sep="\t", comment.char="?", stringsAsFactors=FALSE)$V1#
	pve <- gsub("## pve estimate in the null model = ", "", log[grep("pve estimate", log)])#
	sdpve <- strsplit(log[grep("pve estimate", log)+1], split = " ")[[1]][8]#
	bacteria <- gsub("GWAS.127.season.averaged.bacteria.", "", gsub(".column.*.out.051414ERD.log.txt", "", files[i]))#
	all.pves <- rbind(all.pves, c(bacteria, pve, sdpve))#
}	#
#
sig <- c()#
##### Do any of the bacteria display chip heritability:#
print("checking if any are heritable")#
for (i in 1:dim(all.pves)[1]) {#
	if (all.pves[i,3] == "nan" ) {#
		sig <- c(sig, "x")#
	} else if (as.numeric(all.pves[i,2]) > as.numeric(all.pves[i,3])) {#
		sig <- c(sig, "heritable")#
	} else {#
		sig <- c(sig, "x")#
	}#
}#
#
tozero <- (as.numeric(all.pves[,2])-as.numeric(all.pves[,3]))#
tozero[is.na(tozero)] <- -1000#
#
ordered.sig <- all.pves[order(tozero, decreasing=TRUE),]#
ordered.sig[which(ordered.sig == "nan")] <- 0
head(ordered.sig)
ordered.sig[1:10]
ordered.sig[1:10,]
grep(Anaerostipes, orderd.sig[,1])
grep(Anaerostipes, ordered.sig[,1])
grep("Anaerostipes", ordered.sig[,1])
grep("Akkermansia", ordered.sig[,1])
grep("Anaerofilum", ordered.sig[,1])
grep("Mitsuokella", ordered.sig[,1])
grep("Megasphaera", ordered.sig[,1])
grep("Faecali", ordered.sig[,1])
79+47
79/126
47/126
68+24
?t.test
25+28+24
25+29+22
25+28+24
65+26
grades <- c(95, 92, 77, 95, 79, 80, 91, 85, 76, 77, 98, 85)
length(grades)
hist(grades)
mean(grades)
median(grades)
###### PARAMETERS ###########
# Set the parameters:#
today <- Sys.Date()							# Set the date that will go on the end of the files generated by this script#
today <- format(today, format="%m%d%y")#
output.path <- c("/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/39_FC1to4_seasons_individually/")	# path for all output to go into#
subfolder <- c("1_Initial_data_processing_052614/")		# Optional folder for putting initial data files into#
cor.cutoff = 0.9							# What Pearson correlation cutoff should be used?#
presence.cutoff = 0.75						# In what proportion of individuals should the bacteria be in?#
##############################
##### First, load in all levels of data across all individuals, both seasons:#
all.bacteria <- c()#
initial.bacteria <- c()#
print("Loading all initial bacteria proportion tables...")#
print("Number of taxa before any pruning:")#
for (a in c("phylum", "class", "order", "family", "genus")) {#
	data <- read.table(file=paste("/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/20_FC1to4_for_QTLs/FC1to4.subsampled.2mil.",a,".standardized.reps.combined.no.abs.052313ERD.txt", sep=""), sep="\t", header=TRUE)#
	print(c(a, dim(data)[1]))#
	initial.bacteria <- c(initial.bacteria, dim(data)[1])#
	all.bacteria <- rbind(all.bacteria, data)#
}#
print(c("all taxa", dim(all.bacteria)[1]))
dim(data)
data[1:5,1:5]
zeros <- apply(data, 2, function(x) {length(which(x == 0))/length(x)}
)
length(zeros)
hist(zeros)
zeros <- apply(data, 2, function(x) {length(which(x != 0))})
hist(zeros)
25+28
###### PARAMETERS ###########
# Set the parameters:#
today <- Sys.Date()											# Set the date that will go on the end of the files generated by this script#
today <- format(today, format="%m%d%y")
season <- "winter"#
site <- "fecal"#
input.path <- "/Users/erdavenport/clusterhome/poopQTL/14_seasons_individually/GEMMA_output_bacteria_winter_qvals_052614/"#
output.path <- "/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/39_FC1to4_seasons_individually/3_GEMMA_for_bacteria_052614/winter/"
files <- list.files(path=input.path, pattern="assoc")
length(files)
head(files)
grep("Bifido", files)
i <- 44
bacteria <- gsub(paste("hutt.3chip.hg19remap.", season,".", site,".", sep=""), "", gsub(".column..*.out..*.assoc.txt", "", files[i]))#
	data <- read.table(paste(input.path,files[i], sep=""), sep="\t", header=TRUE, colClasses=c("numeric", "character", "numeric", "numeric", "character", "character", "numeric", "numeric", "numeric", "numeric"))
prefix <- "hutt.3chip.hg19remap.winter.GWAS."
bacteria <- gsub(prefix, "", gsub(".column..*.out..*.assoc.txt", "", files[i]))
bacteria
data <- read.table(paste(input.path,files[i], sep=""), sep=" ", header=TRUE, colClasses=c("numeric", "character", "numeric", "numeric", "character", "character", "numeric", "numeric", "numeric", "numeric"))
bon <- 0.05/dim(data)[1]
bon
requirements <- which(data$p_lrt <= bon | data$q_lrt <= 0.2)
reqirements
requirements
data[requirements,]
dim(dat)
dim(data)
for (j in 1:length(requirements)) {#
			info <- c(season, site, bacteria, data[requirements[j],c(1:3,9:10)])#
			sig.snps <- rbind(sig.snps, info)
}
sig.snps <- c()
for (j in 1:length(requirements)) {#
			info <- c(season, site, bacteria, data[requirements[j],c(1:3,9:10)])#
			sig.snps <- rbind(sig.snps, info)#
		}
sig.snps
sig.snps <- c()
dim(sig.snps)
length(sig.snps)
for (j in 1:length(requirements)) {#
			info <- c(season, site, bacteria, data[requirements[j],c(1:3,9:10)])#
			sig.snps <- rbind(sig.snps, info)#
		}
length(sig.snps)
winter <- read.table(file="/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/39_FC1to4_seasons_individually/3_GEMMA_for_bacteria_052614/winter/list.of.sig.snps.060314ERD.txt"
)
winter
winter <- read.table(file="/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/39_FC1to4_seasons_individually/3_GEMMA_for_bacteria_052614/winter/list.of.sig.snps.060314ERD.txt")#
summer <- read.table(file="/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/39_FC1to4_seasons_individually/3_GEMMA_for_bacteria_052614/summer/list.of.sig.snps.060314ERD.txt")#
added <- read.table(file="/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/38_FC1to4_seasons_added/3_GEMMA_for_bacteria_052014/list.of.sig.snps.060314ERD.txt")#
averaged <- read.table(file="/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/39_FC1to4_seasons_averaged/3_GEMMA_for_bacteria_051414/list.of.sig.snps.060314ERD.txt")
averaged <- read.table(file="/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/37_FC1to4_seasons_averaged/3_GEMMA_for_bacteria_051414/list.of.sig.snps.060314ERD.txt")
alls <- rbind(winter, summer, added, averaged)
dim(alls)
head(alls)
winter <- read.table(file="/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/39_FC1to4_seasons_individually/3_GEMMA_for_bacteria_052614/winter/list.of.sig.snps.060314ERD.txt", header=TRUE)#
summer <- read.table(file="/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/39_FC1to4_seasons_individually/3_GEMMA_for_bacteria_052614/summer/list.of.sig.snps.060314ERD.txt", header=TRUE)#
added <- read.table(file="/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/38_FC1to4_seasons_added/3_GEMMA_for_bacteria_052014/list.of.sig.snps.060314ERD.txt", header=TRUE)#
averaged <- read.table(file="/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/37_FC1to4_seasons_averaged/3_GEMMA_for_bacteria_051414/list.of.sig.snps.060314ERD.txt", header=TRUE)
alls <- rbind(winter, summer, added, averaged)
head(alls)
dim(alls)
write.table(alls, paste("/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/39_FC1to4_seasons_individually/3_GEMMA_for_bacteria_",today,"ERD.txt", sep=""), row.names=FALSE, quote=FALSE)
write.table(alls, paste("/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/39_FC1to4_seasons_individually/3_GEMMA_for_bacteria/all_sig_snps_poop_and_nasal_",today,"ERD.txt", sep=""), row.names=FALSE, quote=FALSE)
write.table(alls, paste("/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/39_FC1to4_seasons_individually/3_GEMMA_for_bacteria_052614/all_sig_snps_poop_and_nasal_",today,"ERD.txt", sep=""), row.names=FALSE, quote=FALSE)
today
###### PARAMETERS ###########
# Set the parameters:#
today <- Sys.Date()											# Set the date that will go on the end of the files generated by this script#
today <- format(today, format="%m%d%y")
today
###### PARAMETERS ###########
# Set the parameters:#
today <- Sys.Date()											# Set the date that will go on the end of the files generated by this script#
today <- format(today, format="%m%d%y")
write.table(alls, paste("/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/39_FC1to4_seasons_individually/3_GEMMA_for_bacteria_052614/all_sig_snps_poop_and_nasal_",today,"ERD.txt", sep=""), row.names=FALSE, quote=FALSE)
qpath <- "/Users/erdavenport/clusterhome/poopQTL/14_seasons_individually/GEMMA_output_bacteria_winter_qvals_052614/"#
prefix <- "hutt.3chip.hg19remap.winter.GWAS."#
bigtable <- "/Users/erdaveport/Dropbox/Lab/Poop/Sequencing_Results/39_FC1to4_seasons_individually/3_GEMMA_for_bacteria_052614/all_sig_snps_poop_and_nasal_060314ERD.txt"
btab <- read.table(file=bigtable, sep="\t", header=TRUE)
bigtable <- "/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/39_FC1to4_seasons_individually/3_GEMMA_for_bacteria_052614/all_sig_snps_poop_and_nasal_060314ERD.txt"
btab <- read.table(file=bigtable, sep="\t", header=TRUE)
dim(btab)
head(btab)
write.table(alls, paste("/Users/erdavenport/Dropbox/Lab/Poop/Sequencing_Results/39_FC1to4_seasons_individually/3_GEMMA_for_bacteria_052614/all_sig_snps_poop_and_nasal_",today,"ERD.txt", sep=""), sep="\t", row.names=FALSE, quote=FALSE)
btab <- read.table(file=bigtable, sep="\t", header=TRUE)
dim(btab)
head(btab)
assoc.list <- list.files(path=qpath, pattern="assoc")
head(assoc.list)
assoc <- read.table(file=paste(qpath,summer.list[i], sep=""), sep=" ", header=TRUE, colClasses=c("numeric", "character", "numeric", "numeric", "character", "character", "numeric", "numeric", "numeric", "numeric"))
assoc <- read.table(file=paste(qpath,assoc.list[i], sep=""), sep=" ", header=TRUE, colClasses=c("numeric", "character", "numeric", "numeric", "character", "character", "numeric", "numeric", "numeric", "numeric"))
dim(assoc)
head(assoc)
this.list <- c()#
for (i in 1:dim(btab)[1]) {#
	print(i)#
	assoc <- read.table(file=paste(qpath,assoc.list[i], sep=""), sep=" ", header=TRUE, colClasses=c("numeric", "character", "numeric", "numeric", "character", "character", "numeric", "numeric", "numeric", "numeric"))#
	this.list <- rbind(this.list, assoc[which(assoc$rs == btab$rs[i]),])#
}
dim(this.list)
head(this.lit)
head(this.list)
head(btab)
i
this.list <- c()#
for (i in 1:dim(btab)[1]) {#
	print(i)#
	if (i == 1 | btab$bacteria[i] != btab$bacteria[i-1]) {#
		print("movin on up")#
		assoc <- read.table(file=paste(qpath,assoc.list[i], sep=""), sep=" ", header=TRUE, colClasses=c("numeric", "character", "numeric", "numeric", "character", "character", "numeric", "numeric", "numeric", "numeric"))#
	}#
	this.list <- rbind(this.list, assoc[which(assoc$rs == btab$rs[i]),])#
}
i
i == 1
btab$bacteria[i]
as.character(btab$bacteria[i]) != as.character(btab$bacteria[i-1])
(i == 1 | as.character(btab$bacteria[i]) != as.character(btab$bacteria[i-1]))
this.list <- c()#
for (i in 1:dim(btab)[1]) {#
	print(i)#
	if (i == 1) {#
		print("movin on up")#
		assoc <- read.table(file=paste(qpath,assoc.list[i], sep=""), sep=" ", header=TRUE, colClasses=c("numeric", "character", "numeric", "numeric", "character", "character", "numeric", "numeric", "numeric", "numeric"))#
	} else if (as.character(btab$bacteria[i]) != as.character(btab$bacteria[i-1])) {#
		print("movin on up")#
		assoc <- read.table(file=paste(qpath,assoc.list[i], sep=""), sep=" ", header=TRUE, colClasses=c("numeric", "character", "numeric", "numeric", "character", "character", "numeric", "numeric", "numeric", "numeric"))#
	}#
	this.list <- rbind(this.list, assoc[which(assoc$rs == btab$rs[i]),])#
}
ci <- read.table(file="/Users/erdavenport/clusterhome/gorka/data/summaries/ci_list_of_files.txt", sep="\n", header=FALSE)$V1
length(ci)
head(ci)
ci <- read.table(file="/Users/erdavenport/clusterhome/gorka/data/summaries/ci_list_of_files.txt", sep="\n", header=FALSE, fstringsAsFactors=FALSE)$V1
ci <- read.table(file="/Users/erdavenport/clusterhome/gorka/data/summaries/ci_list_of_files.txt", sep="\n", header=FALSE, stringsAsFactors=FALSE)$V1
head(ci)
tax <- read.table(file="/Users/erdavenport/clusterhome/gorka/data/summaries/tax_files.txt", sep="\n", header=FALSE, stringsAsFactors=FALSE)$V1
head(tax)
tax <- read.table(file="/Users/erdavenport/clusterhome/gorka/data/summaries/tax_files.txt", sep="\n", header=FALSE, stringsAsFactors=FALSE)$V1
length(tax)
head(tax)
tax <- gsub(".R1_R2_single100F_rdp_genus_nr_rdp_ltp_rearranged_genus_trimmed.taxonomy", "", tax)
head(tax)
ci <- gsub(".R1_R2_single100F_rdp_genus_nr_rdp_ltp_rearranged_genus_trimmed.taxonomy.CI.FILTERED.taxonomy", "", ci)
head(ci)
tax %in% ci
tax[16] %in% ci
tax[16]
seqed <- read.table(file="../results/table.reads.sequenced.per.sample.060614ERD.txt", sep="\t", header=TRUE)
head(seqed)
seqed[1:20,]
qced <- read.table(file="../results/table.reads.sequenced.per.sample.after.QC.060614ERD.txt", sep="\t", header=TRUE)
dim(qced)
classified <- read.table(file="/Users/erdavenport/clusterhome/gorka/data/summaries/lines_after_classification_QC_060914ERD.txt", sep="\n", header=TRUE)
head(classified)
classified <- read.table(file="/Users/erdavenport/clusterhome/gorka/data/summaries/lines_after_classification_QC_060914ERD.txt", sep=" ", header=FALSE)
dim(classified)
head(classified)
classified$V2 <- gsub(".R1_R2_single100F_rdp_genus_nr_rdp_ltp_rearranged_genus_trimmed.taxonomy.CI.FILTERED.taxonomy", "", classified$V2)
head(classified)
head(seqed)
write.table(classified, paste("../results/table.reads.classified.per.sample.",today,"ERD.txt", sep=""), row.names=FALSE, quote=FALSE)
head(qced)
seqed$V2 <- gsub(".fastq", "", seqed$V2)
head(seqed)
qced$V2 <- gsub(".fastq", "", qced$V2)
head(qced)
merged <- merge(seqed, qced, by="V2", all=TRUE)
head(merged)
merged <- merge(merged, classified, by="V2", all=TRUE)
head(merged)
dim(merged)
colnames(merged) <- c("sample", "sequenced_reads", "reads_after_qc", "classified_reads")
head(merged)
sorted <- merged[order(reads$V1),]
sorted <- merged[order(merged$sequenced_reads),]
head(sorted)
colme <- function(x) {#
	if (grepl("MI", x)) {#
		return("blue")#
	} else if (grepl("TEV", x)) {#
		return("red") #
	} else if (grepl("CRS", x)) {#
		return("pink")#
	}#
}#
#
barplot(sorted$classified_reads, col=sapply(sorted$V2, colme), main="Reads sequenced per sample", ylab="reads", xlab="sample")
barplot(sorted$classified_reads, col=sapply(sorted$classified_reads, colme), main="Classified sequenced per sample", ylab="reads", xlab="sample")
warnings()
barplot(sorted$classified_reads, col=sapply(as.character(sorted$classified_reads), colme), main="Classified sequenced per sample", ylab="reads", xlab="sample")
warnings()
barplot(sorted$classified_reads, col=sapply(as.character(sorted$sample), colme), main="Classified sequenced per sample", ylab="reads", xlab="sample")
barplot(sorted$sequenced_reads, col=sapply(sorted$sample, colme), main="Sequences at various steps", ylab="reads", xlab="sample")
barplot(sorted$reads_after_qc, add=TRUE)
barplot(sorted$sequenced_reads, col="blue", main="Sequences at various steps", ylab="reads", xlab="sample")#
barplot(sorted$reads_after_qc, add=TRUE, col="red")#
barplot(sorted$classified_reads, add=TRUE, col="gray")
legend("topleft", fill=c("blue", "red", "gray"), legend=c("sequenced reads", "reads after QC", "classified reads"))
barplot(log10(sorted$sequenced_reads), col="blue", main="Sequences at various steps", ylab="reads", xlab="sample")#
barplot(log10(sorted$reads_after_qc), add=TRUE, col="red")#
barplot(log10(sorted$classified_reads), add=TRUE, col="gray")
pdf(paste("/Users/erdavenport/Dropbox/Lab/Gorka/results/barplot.reads.at.various.stages.",today,"ERD.pdf", sep=""), width=10, height=5)#
par(mfrow=c(1,2))#
#
barplot(sorted$sequenced_reads, col="blue", main="Sequences at various steps", ylab="reads", xlab="sample")#
barplot(sorted$reads_after_qc, add=TRUE, col="red")#
barplot(sorted$classified_reads, add=TRUE, col="gray")#
legend("topleft", fill=c("blue", "red", "gray"), legend=c("sequenced reads", "reads after QC", "classified reads"))#
#
barplot(log10(sorted$sequenced_reads), col="blue", main="Sequences at various steps", ylab="log10(reads)", xlab="sample")#
barplot(log10(sorted$reads_after_qc), add=TRUE, col="red")#
barplot(log10(sorted$classified_reads), add=TRUE, col="gray")#
#
dev.off()
summary(sorted[,2])
summary(sorted[,3])
sorted(summary[,4])
summar(sorted[,4])
summary(sorted[,4])
